// Code generated by Wire protocol buffer compiler, do not edit.
// Source: waterfall.ForwardSession in waterfall.proto
package com.google.waterfall

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class ForwardSession(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val src: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val dst: String = "",
  unknownFields: ByteString = ByteString.EMPTY
) : Message<ForwardSession, ForwardSession.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.src = src
    builder.dst = dst
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ForwardSession) return false
    if (unknownFields != other.unknownFields) return false
    if (src != other.src) return false
    if (dst != other.dst) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + src.hashCode()
      result = result * 37 + dst.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """src=${sanitize(src)}"""
    result += """dst=${sanitize(dst)}"""
    return result.joinToString(prefix = "ForwardSession{", separator = ", ", postfix = "}")
  }

  fun copy(
    src: String = this.src,
    dst: String = this.dst,
    unknownFields: ByteString = this.unknownFields
  ): ForwardSession = ForwardSession(src, dst, unknownFields)

  class Builder : Message.Builder<ForwardSession, Builder>() {
    @JvmField
    var src: String = ""

    @JvmField
    var dst: String = ""

    fun src(src: String): Builder {
      this.src = src
      return this
    }

    fun dst(dst: String): Builder {
      this.dst = dst
      return this
    }

    override fun build(): ForwardSession = ForwardSession(
      src = src,
      dst = dst,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<ForwardSession> = object : ProtoAdapter<ForwardSession>(
      FieldEncoding.LENGTH_DELIMITED, 
      ForwardSession::class, 
      "type.googleapis.com/waterfall.ForwardSession", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: ForwardSession): Int {
        var size = value.unknownFields.size
        if (value.src != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.src)
        if (value.dst != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.dst)
        return size
      }

      override fun encode(writer: ProtoWriter, value: ForwardSession) {
        if (value.src != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.src)
        if (value.dst != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.dst)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): ForwardSession {
        var src: String = ""
        var dst: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> src = ProtoAdapter.STRING.decode(reader)
            2 -> dst = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ForwardSession(
          src = src,
          dst = dst,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: ForwardSession): ForwardSession = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
