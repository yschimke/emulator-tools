// Code generated by Wire protocol buffer compiler, do not edit.
// Source: waterfall.ForwardMessage in waterfall.proto
package com.google.waterfall

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import okio.ByteString

class ForwardMessage(
  /**
   * Kind of connection to start (tcp|udp|unix)
   */
  @field:WireField(
    tag = 1,
    adapter = "com.google.waterfall.ForwardMessage${'$'}Kind#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val kind: Kind = Kind.UNSET,
  @field:WireField(
    tag = 2,
    adapter = "com.google.waterfall.ForwardMessage${'$'}Op#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val op: Op = Op.OPEN,
  /**
   * Address to open and redirect payload to.
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val addr: String = "",
  /**
   * Data to be pushed to connection established on addr.
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val payload: ByteString = ByteString.EMPTY,
  /**
   * Whether or not to rebind the port.
   */
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val rebind: Boolean = false,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<ForwardMessage, ForwardMessage.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.kind = kind
    builder.op = op
    builder.addr = addr
    builder.payload = payload
    builder.rebind = rebind
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ForwardMessage) return false
    if (unknownFields != other.unknownFields) return false
    if (kind != other.kind) return false
    if (op != other.op) return false
    if (addr != other.addr) return false
    if (payload != other.payload) return false
    if (rebind != other.rebind) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + kind.hashCode()
      result = result * 37 + op.hashCode()
      result = result * 37 + addr.hashCode()
      result = result * 37 + payload.hashCode()
      result = result * 37 + rebind.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """kind=$kind"""
    result += """op=$op"""
    result += """addr=${sanitize(addr)}"""
    result += """payload=$payload"""
    result += """rebind=$rebind"""
    return result.joinToString(prefix = "ForwardMessage{", separator = ", ", postfix = "}")
  }

  fun copy(
    kind: Kind = this.kind,
    op: Op = this.op,
    addr: String = this.addr,
    payload: ByteString = this.payload,
    rebind: Boolean = this.rebind,
    unknownFields: ByteString = this.unknownFields
  ): ForwardMessage = ForwardMessage(kind, op, addr, payload, rebind, unknownFields)

  class Builder : Message.Builder<ForwardMessage, Builder>() {
    @JvmField
    var kind: Kind = Kind.UNSET

    @JvmField
    var op: Op = Op.OPEN

    @JvmField
    var addr: String = ""

    @JvmField
    var payload: ByteString = ByteString.EMPTY

    @JvmField
    var rebind: Boolean = false

    /**
     * Kind of connection to start (tcp|udp|unix)
     */
    fun kind(kind: Kind): Builder {
      this.kind = kind
      return this
    }

    fun op(op: Op): Builder {
      this.op = op
      return this
    }

    /**
     * Address to open and redirect payload to.
     */
    fun addr(addr: String): Builder {
      this.addr = addr
      return this
    }

    /**
     * Data to be pushed to connection established on addr.
     */
    fun payload(payload: ByteString): Builder {
      this.payload = payload
      return this
    }

    /**
     * Whether or not to rebind the port.
     */
    fun rebind(rebind: Boolean): Builder {
      this.rebind = rebind
      return this
    }

    override fun build(): ForwardMessage = ForwardMessage(
      kind = kind,
      op = op,
      addr = addr,
      payload = payload,
      rebind = rebind,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<ForwardMessage> = object : ProtoAdapter<ForwardMessage>(
      FieldEncoding.LENGTH_DELIMITED, 
      ForwardMessage::class, 
      "type.googleapis.com/waterfall.ForwardMessage", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: ForwardMessage): Int {
        var size = value.unknownFields.size
        if (value.kind != Kind.UNSET) size += Kind.ADAPTER.encodedSizeWithTag(1, value.kind)
        if (value.op != Op.OPEN) size += Op.ADAPTER.encodedSizeWithTag(2, value.op)
        if (value.addr != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3, value.addr)
        if (value.payload != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(4,
            value.payload)
        if (value.rebind != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(5, value.rebind)
        return size
      }

      override fun encode(writer: ProtoWriter, value: ForwardMessage) {
        if (value.kind != Kind.UNSET) Kind.ADAPTER.encodeWithTag(writer, 1, value.kind)
        if (value.op != Op.OPEN) Op.ADAPTER.encodeWithTag(writer, 2, value.op)
        if (value.addr != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.addr)
        if (value.payload != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 4,
            value.payload)
        if (value.rebind != false) ProtoAdapter.BOOL.encodeWithTag(writer, 5, value.rebind)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): ForwardMessage {
        var kind: Kind = Kind.UNSET
        var op: Op = Op.OPEN
        var addr: String = ""
        var payload: ByteString = ByteString.EMPTY
        var rebind: Boolean = false
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> try {
              kind = Kind.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            2 -> try {
              op = Op.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            3 -> addr = ProtoAdapter.STRING.decode(reader)
            4 -> payload = ProtoAdapter.BYTES.decode(reader)
            5 -> rebind = ProtoAdapter.BOOL.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ForwardMessage(
          kind = kind,
          op = op,
          addr = addr,
          payload = payload,
          rebind = rebind,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: ForwardMessage): ForwardMessage = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  enum class Kind(
    override val value: Int
  ) : WireEnum {
    UNSET(0),

    TCP(1),

    UDP(2),

    UNIX(3);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Kind> = object : EnumAdapter<Kind>(
        Kind::class, 
        PROTO_3, 
        Kind.UNSET
      ) {
        override fun fromValue(value: Int): Kind? = Kind.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): Kind? = when (value) {
        0 -> UNSET
        1 -> TCP
        2 -> UDP
        3 -> UNIX
        else -> null
      }
    }
  }

  enum class Op(
    override val value: Int
  ) : WireEnum {
    OPEN(0),

    FWD(1),

    CLOSE(2);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Op> = object : EnumAdapter<Op>(
        Op::class, 
        PROTO_3, 
        Op.OPEN
      ) {
        override fun fromValue(value: Int): Op? = Op.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): Op? = when (value) {
        0 -> OPEN
        1 -> FWD
        2 -> CLOSE
        else -> null
      }
    }
  }
}
