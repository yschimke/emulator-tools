// Code generated by Wire protocol buffer compiler, do not edit.
// Source: waterfall.Transfer in waterfall.proto
package com.google.waterfall

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * Keep this as lean as possible. We only care about the payload during most
 * of the duration of the session. All other fields are only useful during
 * the beginning/end of the transfer
 */
class Transfer(
  /**
   * Remote path to for push/pull. Remote path lives in the server fs.
   * There is no need to send local path, since client has this info.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val path: String = "",
  /**
   * A stream of bytes. Encoded as a tarball.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val payload: ByteString = ByteString.EMPTY,
  /**
   * status fields.
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val success: Boolean = false,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val err: ByteString = ByteString.EMPTY,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<Transfer, Transfer.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.path = path
    builder.payload = payload
    builder.success = success
    builder.err = err
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Transfer) return false
    if (unknownFields != other.unknownFields) return false
    if (path != other.path) return false
    if (payload != other.payload) return false
    if (success != other.success) return false
    if (err != other.err) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + path.hashCode()
      result = result * 37 + payload.hashCode()
      result = result * 37 + success.hashCode()
      result = result * 37 + err.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """path=${sanitize(path)}"""
    result += """payload=$payload"""
    result += """success=$success"""
    result += """err=$err"""
    return result.joinToString(prefix = "Transfer{", separator = ", ", postfix = "}")
  }

  fun copy(
    path: String = this.path,
    payload: ByteString = this.payload,
    success: Boolean = this.success,
    err: ByteString = this.err,
    unknownFields: ByteString = this.unknownFields
  ): Transfer = Transfer(path, payload, success, err, unknownFields)

  class Builder : Message.Builder<Transfer, Builder>() {
    @JvmField
    var path: String = ""

    @JvmField
    var payload: ByteString = ByteString.EMPTY

    @JvmField
    var success: Boolean = false

    @JvmField
    var err: ByteString = ByteString.EMPTY

    /**
     * Remote path to for push/pull. Remote path lives in the server fs.
     * There is no need to send local path, since client has this info.
     */
    fun path(path: String): Builder {
      this.path = path
      return this
    }

    /**
     * A stream of bytes. Encoded as a tarball.
     */
    fun payload(payload: ByteString): Builder {
      this.payload = payload
      return this
    }

    /**
     * status fields.
     */
    fun success(success: Boolean): Builder {
      this.success = success
      return this
    }

    fun err(err: ByteString): Builder {
      this.err = err
      return this
    }

    override fun build(): Transfer = Transfer(
      path = path,
      payload = payload,
      success = success,
      err = err,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<Transfer> = object : ProtoAdapter<Transfer>(
      FieldEncoding.LENGTH_DELIMITED, 
      Transfer::class, 
      "type.googleapis.com/waterfall.Transfer", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: Transfer): Int {
        var size = value.unknownFields.size
        if (value.path != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.path)
        if (value.payload != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(2,
            value.payload)
        if (value.success != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(3, value.success)
        if (value.err != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(4,
            value.err)
        return size
      }

      override fun encode(writer: ProtoWriter, value: Transfer) {
        if (value.path != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.path)
        if (value.payload != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 2,
            value.payload)
        if (value.success != false) ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.success)
        if (value.err != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 4, value.err)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): Transfer {
        var path: String = ""
        var payload: ByteString = ByteString.EMPTY
        var success: Boolean = false
        var err: ByteString = ByteString.EMPTY
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> path = ProtoAdapter.STRING.decode(reader)
            2 -> payload = ProtoAdapter.BYTES.decode(reader)
            3 -> success = ProtoAdapter.BOOL.decode(reader)
            4 -> err = ProtoAdapter.BYTES.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Transfer(
          path = path,
          payload = payload,
          success = success,
          err = err,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: Transfer): Transfer = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
