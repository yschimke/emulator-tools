// Code generated by Wire protocol buffer compiler, do not edit.
// Source: waterfall.Waterfall in waterfall.proto
package com.google.waterfall

import com.squareup.wire.GrpcCall
import com.squareup.wire.GrpcClient
import com.squareup.wire.GrpcMethod
import com.squareup.wire.GrpcStreamingCall
import com.squareup.wire.ProtoAdapter
import kotlin.Unit

class GrpcWaterfallClient(
  private val client: GrpcClient
) : WaterfallClient {
  /**
   * Echo exists solely for test purposes.
   */
  override fun Echo(): GrpcStreamingCall<Message, Message> = client.newStreamingCall(GrpcMethod(
      path = "/waterfall.Waterfall/Echo",
      requestAdapter = Message.ADAPTER,
      responseAdapter = Message.ADAPTER
  ))

  /**
   * Push file/dir from host to device.
   */
  override fun Push(): GrpcStreamingCall<Transfer, Transfer> = client.newStreamingCall(GrpcMethod(
      path = "/waterfall.Waterfall/Push",
      requestAdapter = Transfer.ADAPTER,
      responseAdapter = Transfer.ADAPTER
  ))

  /**
   * Pull file/dir from device to host.
   */
  override fun Pull(): GrpcStreamingCall<Transfer, Transfer> = client.newStreamingCall(GrpcMethod(
      path = "/waterfall.Waterfall/Pull",
      requestAdapter = Transfer.ADAPTER,
      responseAdapter = Transfer.ADAPTER
  ))

  /**
   * Exec executes cmd in the device and forward stdout and stderr to client
   * Exec expects a single initial CmdProgress message if stdin is not
   * being redirected. Otherwise Exec will read std from the stream.
   */
  override fun Exec(): GrpcStreamingCall<CmdProgress, CmdProgress> =
      client.newStreamingCall(GrpcMethod(
      path = "/waterfall.Waterfall/Exec",
      requestAdapter = CmdProgress.ADAPTER,
      responseAdapter = CmdProgress.ADAPTER
  ))

  /**
   * Forward forwards the stream payload to the requested socket
   */
  override fun Forward(): GrpcStreamingCall<ForwardMessage, ForwardMessage> =
      client.newStreamingCall(GrpcMethod(
      path = "/waterfall.Waterfall/Forward",
      requestAdapter = ForwardMessage.ADAPTER,
      responseAdapter = ForwardMessage.ADAPTER
  ))

  /**
   * Version gets the version of the server.
   */
  override fun Version(): GrpcCall<Unit, VersionMessage> = client.newCall(GrpcMethod(
      path = "/waterfall.Waterfall/Version",
      requestAdapter = ProtoAdapter.EMPTY,
      responseAdapter = VersionMessage.ADAPTER
  ))
}
