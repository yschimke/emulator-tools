// Code generated by Wire protocol buffer compiler, do not edit.
// Source: waterfall.PortForwarder in waterfall.proto
package com.google.waterfall

import com.squareup.wire.GrpcCall
import com.squareup.wire.GrpcClient
import com.squareup.wire.GrpcMethod
import com.squareup.wire.ProtoAdapter
import kotlin.Unit

/**
 * PortForwarder service runs a port forwarding session via waterfall.
 * It allows start and stop forwarding connections when the waterfall client
 * is unable to mantains any state (e.g. the waterfall adb binary).
 */
class GrpcPortForwarderClient(
  private val client: GrpcClient
) : PortForwarderClient {
  override fun ForwardPort(): GrpcCall<PortForwardRequest, Unit> = client.newCall(GrpcMethod(
      path = "/waterfall.PortForwarder/ForwardPort",
      requestAdapter = PortForwardRequest.ADAPTER,
      responseAdapter = ProtoAdapter.EMPTY
  ))

  override fun Stop(): GrpcCall<PortForwardRequest, Unit> = client.newCall(GrpcMethod(
      path = "/waterfall.PortForwarder/Stop",
      requestAdapter = PortForwardRequest.ADAPTER,
      responseAdapter = ProtoAdapter.EMPTY
  ))

  override fun StopAll(): GrpcCall<Unit, Unit> = client.newCall(GrpcMethod(
      path = "/waterfall.PortForwarder/StopAll",
      requestAdapter = ProtoAdapter.EMPTY,
      responseAdapter = ProtoAdapter.EMPTY
  ))

  override fun List(): GrpcCall<Unit, ForwardedSessions> = client.newCall(GrpcMethod(
      path = "/waterfall.PortForwarder/List",
      requestAdapter = ProtoAdapter.EMPTY,
      responseAdapter = ForwardedSessions.ADAPTER
  ))
}
