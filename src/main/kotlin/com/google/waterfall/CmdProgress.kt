// Code generated by Wire protocol buffer compiler, do not edit.
// Source: waterfall.CmdProgress in waterfall.proto
package com.google.waterfall

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class CmdProgress(
  /**
   * Command to execute. Only valid for the initial message of the stream.
   */
  @field:WireField(
    tag = 5,
    adapter = "com.google.waterfall.Cmd#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val cmd: Cmd? = null,
  /**
   * the exit code of the command.
   * Only populated when the gRPC stream is done.
   * I.e. the last message before the EOF.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "exitCode"
  )
  @JvmField
  val exit_code: Int = 0,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val stdout: ByteString = ByteString.EMPTY,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val stderr: ByteString = ByteString.EMPTY,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val stdin: ByteString = ByteString.EMPTY,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<CmdProgress, CmdProgress.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.cmd = cmd
    builder.exit_code = exit_code
    builder.stdout = stdout
    builder.stderr = stderr
    builder.stdin = stdin
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is CmdProgress) return false
    if (unknownFields != other.unknownFields) return false
    if (cmd != other.cmd) return false
    if (exit_code != other.exit_code) return false
    if (stdout != other.stdout) return false
    if (stderr != other.stderr) return false
    if (stdin != other.stdin) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + cmd.hashCode()
      result = result * 37 + exit_code.hashCode()
      result = result * 37 + stdout.hashCode()
      result = result * 37 + stderr.hashCode()
      result = result * 37 + stdin.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (cmd != null) result += """cmd=$cmd"""
    result += """exit_code=$exit_code"""
    result += """stdout=$stdout"""
    result += """stderr=$stderr"""
    result += """stdin=$stdin"""
    return result.joinToString(prefix = "CmdProgress{", separator = ", ", postfix = "}")
  }

  fun copy(
    cmd: Cmd? = this.cmd,
    exit_code: Int = this.exit_code,
    stdout: ByteString = this.stdout,
    stderr: ByteString = this.stderr,
    stdin: ByteString = this.stdin,
    unknownFields: ByteString = this.unknownFields
  ): CmdProgress = CmdProgress(cmd, exit_code, stdout, stderr, stdin, unknownFields)

  class Builder : Message.Builder<CmdProgress, Builder>() {
    @JvmField
    var cmd: Cmd? = null

    @JvmField
    var exit_code: Int = 0

    @JvmField
    var stdout: ByteString = ByteString.EMPTY

    @JvmField
    var stderr: ByteString = ByteString.EMPTY

    @JvmField
    var stdin: ByteString = ByteString.EMPTY

    /**
     * Command to execute. Only valid for the initial message of the stream.
     */
    fun cmd(cmd: Cmd?): Builder {
      this.cmd = cmd
      return this
    }

    /**
     * the exit code of the command.
     * Only populated when the gRPC stream is done.
     * I.e. the last message before the EOF.
     */
    fun exit_code(exit_code: Int): Builder {
      this.exit_code = exit_code
      return this
    }

    fun stdout(stdout: ByteString): Builder {
      this.stdout = stdout
      return this
    }

    fun stderr(stderr: ByteString): Builder {
      this.stderr = stderr
      return this
    }

    fun stdin(stdin: ByteString): Builder {
      this.stdin = stdin
      return this
    }

    override fun build(): CmdProgress = CmdProgress(
      cmd = cmd,
      exit_code = exit_code,
      stdout = stdout,
      stderr = stderr,
      stdin = stdin,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<CmdProgress> = object : ProtoAdapter<CmdProgress>(
      FieldEncoding.LENGTH_DELIMITED, 
      CmdProgress::class, 
      "type.googleapis.com/waterfall.CmdProgress", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: CmdProgress): Int {
        var size = value.unknownFields.size
        if (value.cmd != null) size += Cmd.ADAPTER.encodedSizeWithTag(5, value.cmd)
        if (value.exit_code != 0) size += ProtoAdapter.UINT32.encodedSizeWithTag(1, value.exit_code)
        if (value.stdout != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(2,
            value.stdout)
        if (value.stderr != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(3,
            value.stderr)
        if (value.stdin != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(4,
            value.stdin)
        return size
      }

      override fun encode(writer: ProtoWriter, value: CmdProgress) {
        if (value.cmd != null) Cmd.ADAPTER.encodeWithTag(writer, 5, value.cmd)
        if (value.exit_code != 0) ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.exit_code)
        if (value.stdout != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 2,
            value.stdout)
        if (value.stderr != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 3,
            value.stderr)
        if (value.stdin != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 4,
            value.stdin)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): CmdProgress {
        var cmd: Cmd? = null
        var exit_code: Int = 0
        var stdout: ByteString = ByteString.EMPTY
        var stderr: ByteString = ByteString.EMPTY
        var stdin: ByteString = ByteString.EMPTY
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            5 -> cmd = Cmd.ADAPTER.decode(reader)
            1 -> exit_code = ProtoAdapter.UINT32.decode(reader)
            2 -> stdout = ProtoAdapter.BYTES.decode(reader)
            3 -> stderr = ProtoAdapter.BYTES.decode(reader)
            4 -> stdin = ProtoAdapter.BYTES.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return CmdProgress(
          cmd = cmd,
          exit_code = exit_code,
          stdout = stdout,
          stderr = stderr,
          stdin = stdin,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: CmdProgress): CmdProgress = value.copy(
        cmd = value.cmd?.let(Cmd.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
