// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.EntryList in emulator_controller.proto
package com.android.emulator.control

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.checkElementsNotNull
import com.squareup.wire.internal.immutableCopyOf
import com.squareup.wire.internal.redactElements
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.collections.List
import kotlin.jvm.JvmField
import okio.ByteString

class EntryList(
  entry: List<Entry> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY
) : Message<EntryList, EntryList.Builder>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    adapter = "com.android.emulator.control.Entry#ADAPTER",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val entry: List<Entry> = immutableCopyOf("entry", entry)

  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.entry = entry
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is EntryList) return false
    if (unknownFields != other.unknownFields) return false
    if (entry != other.entry) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + entry.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (entry.isNotEmpty()) result += """entry=$entry"""
    return result.joinToString(prefix = "EntryList{", separator = ", ", postfix = "}")
  }

  fun copy(entry: List<Entry> = this.entry, unknownFields: ByteString = this.unknownFields):
      EntryList = EntryList(entry, unknownFields)

  class Builder : Message.Builder<EntryList, Builder>() {
    @JvmField
    var entry: List<Entry> = emptyList()

    fun entry(entry: List<Entry>): Builder {
      checkElementsNotNull(entry)
      this.entry = entry
      return this
    }

    override fun build(): EntryList = EntryList(
      entry = entry,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<EntryList> = object : ProtoAdapter<EntryList>(
      FieldEncoding.LENGTH_DELIMITED, 
      EntryList::class, 
      "type.googleapis.com/android.emulation.control.EntryList", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: EntryList): Int {
        var size = value.unknownFields.size
        size += Entry.ADAPTER.asRepeated().encodedSizeWithTag(1, value.entry)
        return size
      }

      override fun encode(writer: ProtoWriter, value: EntryList) {
        Entry.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.entry)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): EntryList {
        val entry = mutableListOf<Entry>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> entry.add(Entry.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return EntryList(
          entry = entry,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: EntryList): EntryList = value.copy(
        entry = value.entry.redactElements(Entry.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
