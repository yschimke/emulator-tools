// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.MouseEvent in emulator_controller.proto
package com.android.emulator.control

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * The MouseEvent interface represents events that occur due to the user
 * interacting with a pointing device (such as a mouse).
 */
class MouseEvent(
  /**
   * The horizontal coordinate. This is the physical location on the
   * screen For example 0 indicates the leftmost coordinate.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val x: Int = 0,
  /**
   * The vertical coordinate. This is the physical location on the screen
   * For example 0 indicates the top left coordinate.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val y: Int = 0,
  /**
   * Indicates which buttons are pressed.
   * 0: No button was pressed
   * 1: Primary button (left)
   * 2: Secondary button (right)
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val buttons: Int = 0,
  /**
   * The display device where the mouse event occurred.
   * Omitting or using the value 0 indicates the main display.
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val device: Int = 0,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<MouseEvent, MouseEvent.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.x = x
    builder.y = y
    builder.buttons = buttons
    builder.device = device
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is MouseEvent) return false
    if (unknownFields != other.unknownFields) return false
    if (x != other.x) return false
    if (y != other.y) return false
    if (buttons != other.buttons) return false
    if (device != other.device) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + x.hashCode()
      result = result * 37 + y.hashCode()
      result = result * 37 + buttons.hashCode()
      result = result * 37 + device.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """x=$x"""
    result += """y=$y"""
    result += """buttons=$buttons"""
    result += """device=$device"""
    return result.joinToString(prefix = "MouseEvent{", separator = ", ", postfix = "}")
  }

  fun copy(
    x: Int = this.x,
    y: Int = this.y,
    buttons: Int = this.buttons,
    device: Int = this.device,
    unknownFields: ByteString = this.unknownFields
  ): MouseEvent = MouseEvent(x, y, buttons, device, unknownFields)

  class Builder : Message.Builder<MouseEvent, Builder>() {
    @JvmField
    var x: Int = 0

    @JvmField
    var y: Int = 0

    @JvmField
    var buttons: Int = 0

    @JvmField
    var device: Int = 0

    /**
     * The horizontal coordinate. This is the physical location on the
     * screen For example 0 indicates the leftmost coordinate.
     */
    fun x(x: Int): Builder {
      this.x = x
      return this
    }

    /**
     * The vertical coordinate. This is the physical location on the screen
     * For example 0 indicates the top left coordinate.
     */
    fun y(y: Int): Builder {
      this.y = y
      return this
    }

    /**
     * Indicates which buttons are pressed.
     * 0: No button was pressed
     * 1: Primary button (left)
     * 2: Secondary button (right)
     */
    fun buttons(buttons: Int): Builder {
      this.buttons = buttons
      return this
    }

    /**
     * The display device where the mouse event occurred.
     * Omitting or using the value 0 indicates the main display.
     */
    fun device(device: Int): Builder {
      this.device = device
      return this
    }

    override fun build(): MouseEvent = MouseEvent(
      x = x,
      y = y,
      buttons = buttons,
      device = device,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<MouseEvent> = object : ProtoAdapter<MouseEvent>(
      FieldEncoding.LENGTH_DELIMITED, 
      MouseEvent::class, 
      "type.googleapis.com/android.emulation.control.MouseEvent", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: MouseEvent): Int {
        var size = value.unknownFields.size
        if (value.x != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(1, value.x)
        if (value.y != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.y)
        if (value.buttons != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(3, value.buttons)
        if (value.device != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(4, value.device)
        return size
      }

      override fun encode(writer: ProtoWriter, value: MouseEvent) {
        if (value.x != 0) ProtoAdapter.INT32.encodeWithTag(writer, 1, value.x)
        if (value.y != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.y)
        if (value.buttons != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.buttons)
        if (value.device != 0) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.device)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): MouseEvent {
        var x: Int = 0
        var y: Int = 0
        var buttons: Int = 0
        var device: Int = 0
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> x = ProtoAdapter.INT32.decode(reader)
            2 -> y = ProtoAdapter.INT32.decode(reader)
            3 -> buttons = ProtoAdapter.INT32.decode(reader)
            4 -> device = ProtoAdapter.INT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return MouseEvent(
          x = x,
          y = y,
          buttons = buttons,
          device = device,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: MouseEvent): MouseEvent = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
