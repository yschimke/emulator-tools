// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.SocketControl in control_socket.proto
package com.android.emulator.control

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.internal.missingRequiredFields
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import okio.ByteString

/**
 * Used to communicate the socket state between a waterfall service running
 * inside the emulator (guest) and a domain socket running on the host
 * (emulator)
 *
 * The host does not have the abiliy to open direct connections, but can accept
 * incoming connections.
 *
 * The protocol is as follows:
 *
 * - The first message on a channel from guest -> host is always a
 * "SocketControl" message.
 * - A channel that is identified with fd=0 is called the control channel.
 *   Only SocketControl messages are exchanged on this channel.
 *
 * For channel 0:
 *    - If the hosts sends an open message:
 *           - The guest should respond with a new connection, With the first
 *           message
 *             an identity message with the requested fd
 *    - If the hosts sends a close message:
 *           - The guest can close the connection with the given fd, no new
 *           messages will be send on the
 *             channel. (Be aware of out of order delivery, there still might be
 *             some leftover bytes)
 *    - If the guests sends a close message:
 *           - The host can close the connection with the given fd, no new
 *           messages will be send on the
 *             channel. (Be aware of out of order delivery, there still might be
 *             some leftover bytes)
 *
 * For a new connection the host usually will read the socket control message,
 * and pass on the remaining bytes to whomever wants to consume them.
 */
class SocketControl(
  /**
   * 1 Byte
   */
  @field:WireField(
    tag = 1,
    adapter = "com.android.emulator.control.SocketControl${'$'}Sort#ADAPTER",
    label = WireField.Label.REQUIRED
  )
  @JvmField
  val sort: Sort,
  /**
   * 4 Bytes
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    label = WireField.Label.REQUIRED
  )
  @JvmField
  val fd: Int,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<SocketControl, SocketControl.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.sort = sort
    builder.fd = fd
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is SocketControl) return false
    if (unknownFields != other.unknownFields) return false
    if (sort != other.sort) return false
    if (fd != other.fd) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + sort.hashCode()
      result = result * 37 + fd.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """sort=$sort"""
    result += """fd=$fd"""
    return result.joinToString(prefix = "SocketControl{", separator = ", ", postfix = "}")
  }

  fun copy(
    sort: Sort = this.sort,
    fd: Int = this.fd,
    unknownFields: ByteString = this.unknownFields
  ): SocketControl = SocketControl(sort, fd, unknownFields)

  class Builder : Message.Builder<SocketControl, Builder>() {
    @JvmField
    var sort: Sort? = null

    @JvmField
    var fd: Int? = null

    /**
     * 1 Byte
     */
    fun sort(sort: Sort): Builder {
      this.sort = sort
      return this
    }

    /**
     * 4 Bytes
     */
    fun fd(fd: Int): Builder {
      this.fd = fd
      return this
    }

    override fun build(): SocketControl = SocketControl(
      sort = sort ?: throw missingRequiredFields(sort, "sort"),
      fd = fd ?: throw missingRequiredFields(fd, "fd"),
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<SocketControl> = object : ProtoAdapter<SocketControl>(
      FieldEncoding.LENGTH_DELIMITED, 
      SocketControl::class, 
      "type.googleapis.com/android.emulation.control.SocketControl", 
      PROTO_2, 
      null
    ) {
      override fun encodedSize(value: SocketControl): Int {
        var size = value.unknownFields.size
        size += Sort.ADAPTER.encodedSizeWithTag(1, value.sort)
        size += ProtoAdapter.FIXED32.encodedSizeWithTag(2, value.fd)
        return size
      }

      override fun encode(writer: ProtoWriter, value: SocketControl) {
        Sort.ADAPTER.encodeWithTag(writer, 1, value.sort)
        ProtoAdapter.FIXED32.encodeWithTag(writer, 2, value.fd)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): SocketControl {
        var sort: Sort? = null
        var fd: Int? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> try {
              sort = Sort.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            2 -> fd = ProtoAdapter.FIXED32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return SocketControl(
          sort = sort ?: throw missingRequiredFields(sort, "sort"),
          fd = fd ?: throw missingRequiredFields(fd, "fd"),
          unknownFields = unknownFields
        )
      }

      override fun redact(value: SocketControl): SocketControl = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  enum class Sort(
    override val value: Int
  ) : WireEnum {
    /**
     * Indicates the identify of the channel on which this
     */
    identity(0),

    /**
     * message is sent.
     * Request the client to open up a connection with the
     */
    openn(1),

    /**
     * requested id.
     * Indicate that the channel with the given fd is to be
     */
    close(2);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Sort> = object : EnumAdapter<Sort>(
        Sort::class, 
        PROTO_2, 
        Sort.identity
      ) {
        override fun fromValue(value: Int): Sort? = Sort.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): Sort? = when (value) {
        0 -> identity
        1 -> openn
        2 -> close
        else -> null
      }
    }
  }
}
