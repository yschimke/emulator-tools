// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.SmsMessage in emulator_controller.proto
package com.android.emulator.control

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class SmsMessage(
  /**
   * The source address where this message came from.
   *
   * The address should be a valid GSM-formatted address as specified by
   * 3GPP 23.040 Sec 9.1.2.5.
   *
   * For example: +3106225412 or (650) 555-1221
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val srcAddress: String = "",
  /**
   * A utf8 encoded text message that should be delivered.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val text: String = "",
  unknownFields: ByteString = ByteString.EMPTY
) : Message<SmsMessage, SmsMessage.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.srcAddress = srcAddress
    builder.text = text
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is SmsMessage) return false
    if (unknownFields != other.unknownFields) return false
    if (srcAddress != other.srcAddress) return false
    if (text != other.text) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + srcAddress.hashCode()
      result = result * 37 + text.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """srcAddress=${sanitize(srcAddress)}"""
    result += """text=${sanitize(text)}"""
    return result.joinToString(prefix = "SmsMessage{", separator = ", ", postfix = "}")
  }

  fun copy(
    srcAddress: String = this.srcAddress,
    text: String = this.text,
    unknownFields: ByteString = this.unknownFields
  ): SmsMessage = SmsMessage(srcAddress, text, unknownFields)

  class Builder : Message.Builder<SmsMessage, Builder>() {
    @JvmField
    var srcAddress: String = ""

    @JvmField
    var text: String = ""

    /**
     * The source address where this message came from.
     *
     * The address should be a valid GSM-formatted address as specified by
     * 3GPP 23.040 Sec 9.1.2.5.
     *
     * For example: +3106225412 or (650) 555-1221
     */
    fun srcAddress(srcAddress: String): Builder {
      this.srcAddress = srcAddress
      return this
    }

    /**
     * A utf8 encoded text message that should be delivered.
     */
    fun text(text: String): Builder {
      this.text = text
      return this
    }

    override fun build(): SmsMessage = SmsMessage(
      srcAddress = srcAddress,
      text = text,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<SmsMessage> = object : ProtoAdapter<SmsMessage>(
      FieldEncoding.LENGTH_DELIMITED, 
      SmsMessage::class, 
      "type.googleapis.com/android.emulation.control.SmsMessage", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: SmsMessage): Int {
        var size = value.unknownFields.size
        if (value.srcAddress != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1,
            value.srcAddress)
        if (value.text != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.text)
        return size
      }

      override fun encode(writer: ProtoWriter, value: SmsMessage) {
        if (value.srcAddress != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.srcAddress)
        if (value.text != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.text)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): SmsMessage {
        var srcAddress: String = ""
        var text: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> srcAddress = ProtoAdapter.STRING.decode(reader)
            2 -> text = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return SmsMessage(
          srcAddress = srcAddress,
          text = text,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: SmsMessage): SmsMessage = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
