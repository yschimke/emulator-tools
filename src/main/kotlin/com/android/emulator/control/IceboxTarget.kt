// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.IceboxTarget in snapshot_service.proto
package com.android.emulator.control

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class IceboxTarget(
  /**
   * This is the process id to attach to, if this value is not set (0)
   * The process name will be used instead.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val pid: Long = 0L,
  /**
   * The process name to attach to if any, if this is not set the pid will
   * be used. This is usually the application name of your application under
   * test, that is passed in to the am instrument command. It is likely
   * what you will find in your AndroidManifest.xml
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "packageName"
  )
  @JvmField
  val package_name: String = "",
  /**
   * The name of the snapshot that icebox will create if a snapshot is
   * generated.
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "snapshotId"
  )
  @JvmField
  val snapshot_id: String = "",
  /**
   * [Output Only] True if icebox failed to track the given target.
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val failed: Boolean = false,
  /**
   * [Output Only] Detailed error message that might provide more information.
   */
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val err: String = "",
  unknownFields: ByteString = ByteString.EMPTY
) : Message<IceboxTarget, IceboxTarget.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.pid = pid
    builder.package_name = package_name
    builder.snapshot_id = snapshot_id
    builder.failed = failed
    builder.err = err
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is IceboxTarget) return false
    if (unknownFields != other.unknownFields) return false
    if (pid != other.pid) return false
    if (package_name != other.package_name) return false
    if (snapshot_id != other.snapshot_id) return false
    if (failed != other.failed) return false
    if (err != other.err) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + pid.hashCode()
      result = result * 37 + package_name.hashCode()
      result = result * 37 + snapshot_id.hashCode()
      result = result * 37 + failed.hashCode()
      result = result * 37 + err.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """pid=$pid"""
    result += """package_name=${sanitize(package_name)}"""
    result += """snapshot_id=${sanitize(snapshot_id)}"""
    result += """failed=$failed"""
    result += """err=${sanitize(err)}"""
    return result.joinToString(prefix = "IceboxTarget{", separator = ", ", postfix = "}")
  }

  fun copy(
    pid: Long = this.pid,
    package_name: String = this.package_name,
    snapshot_id: String = this.snapshot_id,
    failed: Boolean = this.failed,
    err: String = this.err,
    unknownFields: ByteString = this.unknownFields
  ): IceboxTarget = IceboxTarget(pid, package_name, snapshot_id, failed, err, unknownFields)

  class Builder : Message.Builder<IceboxTarget, Builder>() {
    @JvmField
    var pid: Long = 0L

    @JvmField
    var package_name: String = ""

    @JvmField
    var snapshot_id: String = ""

    @JvmField
    var failed: Boolean = false

    @JvmField
    var err: String = ""

    /**
     * This is the process id to attach to, if this value is not set (0)
     * The process name will be used instead.
     */
    fun pid(pid: Long): Builder {
      this.pid = pid
      return this
    }

    /**
     * The process name to attach to if any, if this is not set the pid will
     * be used. This is usually the application name of your application under
     * test, that is passed in to the am instrument command. It is likely
     * what you will find in your AndroidManifest.xml
     */
    fun package_name(package_name: String): Builder {
      this.package_name = package_name
      return this
    }

    /**
     * The name of the snapshot that icebox will create if a snapshot is
     * generated.
     */
    fun snapshot_id(snapshot_id: String): Builder {
      this.snapshot_id = snapshot_id
      return this
    }

    /**
     * [Output Only] True if icebox failed to track the given target.
     */
    fun failed(failed: Boolean): Builder {
      this.failed = failed
      return this
    }

    /**
     * [Output Only] Detailed error message that might provide more information.
     */
    fun err(err: String): Builder {
      this.err = err
      return this
    }

    override fun build(): IceboxTarget = IceboxTarget(
      pid = pid,
      package_name = package_name,
      snapshot_id = snapshot_id,
      failed = failed,
      err = err,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<IceboxTarget> = object : ProtoAdapter<IceboxTarget>(
      FieldEncoding.LENGTH_DELIMITED, 
      IceboxTarget::class, 
      "type.googleapis.com/android.emulation.control.IceboxTarget", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: IceboxTarget): Int {
        var size = value.unknownFields.size
        if (value.pid != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(1, value.pid)
        if (value.package_name != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2,
            value.package_name)
        if (value.snapshot_id != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3,
            value.snapshot_id)
        if (value.failed != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(4, value.failed)
        if (value.err != "") size += ProtoAdapter.STRING.encodedSizeWithTag(5, value.err)
        return size
      }

      override fun encode(writer: ProtoWriter, value: IceboxTarget) {
        if (value.pid != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.pid)
        if (value.package_name != "") ProtoAdapter.STRING.encodeWithTag(writer, 2,
            value.package_name)
        if (value.snapshot_id != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.snapshot_id)
        if (value.failed != false) ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.failed)
        if (value.err != "") ProtoAdapter.STRING.encodeWithTag(writer, 5, value.err)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): IceboxTarget {
        var pid: Long = 0L
        var package_name: String = ""
        var snapshot_id: String = ""
        var failed: Boolean = false
        var err: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> pid = ProtoAdapter.INT64.decode(reader)
            2 -> package_name = ProtoAdapter.STRING.decode(reader)
            3 -> snapshot_id = ProtoAdapter.STRING.decode(reader)
            4 -> failed = ProtoAdapter.BOOL.decode(reader)
            5 -> err = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return IceboxTarget(
          pid = pid,
          package_name = package_name,
          snapshot_id = snapshot_id,
          failed = failed,
          err = err,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: IceboxTarget): IceboxTarget = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
