// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.PhoneResponse in emulator_controller.proto
package com.android.emulator.control

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import okio.ByteString

class PhoneResponse(
  @field:WireField(
    tag = 1,
    adapter = "com.android.emulator.control.PhoneResponse${'$'}Response#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val response: Response = Response.OK,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<PhoneResponse, PhoneResponse.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.response = response
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is PhoneResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (response != other.response) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + response.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """response=$response"""
    return result.joinToString(prefix = "PhoneResponse{", separator = ", ", postfix = "}")
  }

  fun copy(response: Response = this.response, unknownFields: ByteString = this.unknownFields):
      PhoneResponse = PhoneResponse(response, unknownFields)

  class Builder : Message.Builder<PhoneResponse, Builder>() {
    @JvmField
    var response: Response = Response.OK

    fun response(response: Response): Builder {
      this.response = response
      return this
    }

    override fun build(): PhoneResponse = PhoneResponse(
      response = response,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<PhoneResponse> = object : ProtoAdapter<PhoneResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      PhoneResponse::class, 
      "type.googleapis.com/android.emulation.control.PhoneResponse", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: PhoneResponse): Int {
        var size = value.unknownFields.size
        if (value.response != Response.OK) size += Response.ADAPTER.encodedSizeWithTag(1,
            value.response)
        return size
      }

      override fun encode(writer: ProtoWriter, value: PhoneResponse) {
        if (value.response != Response.OK) Response.ADAPTER.encodeWithTag(writer, 1, value.response)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): PhoneResponse {
        var response: Response = Response.OK
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> try {
              response = Response.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            else -> reader.readUnknownField(tag)
          }
        }
        return PhoneResponse(
          response = response,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: PhoneResponse): PhoneResponse = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  enum class Response(
    override val value: Int
  ) : WireEnum {
    OK(0),

    /**
     * Enum out of range
     */
    BadOperation(1),

    /**
     * Mal-formed telephone number
     */
    BadNumber(2),

    /**
     * E.g., disconnect when no call is in progress
     */
    InvalidAction(3),

    /**
     * Internal error
     */
    ActionFailed(4),

    /**
     * Radio power off
     */
    RadioOff(5);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Response> = object : EnumAdapter<Response>(
        Response::class, 
        PROTO_3, 
        Response.OK
      ) {
        override fun fromValue(value: Int): Response? = Response.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): Response? = when (value) {
        0 -> OK
        1 -> BadOperation
        2 -> BadNumber
        3 -> InvalidAction
        4 -> ActionFailed
        5 -> RadioOff
        else -> null
      }
    }
  }
}
