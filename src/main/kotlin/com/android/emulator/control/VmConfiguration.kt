// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.VmConfiguration in emulator_controller.proto
package com.android.emulator.control

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import okio.ByteString

/**
 * Information about the hypervisor that is currently in use.
 */
class VmConfiguration(
  @field:WireField(
    tag = 1,
    adapter = "com.android.emulator.control.VmConfiguration${'$'}VmHypervisorType#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val hypervisorType: VmHypervisorType = VmHypervisorType.UNKNOWN,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val numberOfCpuCores: Int = 0,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val ramSizeBytes: Long = 0L,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<VmConfiguration, VmConfiguration.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.hypervisorType = hypervisorType
    builder.numberOfCpuCores = numberOfCpuCores
    builder.ramSizeBytes = ramSizeBytes
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is VmConfiguration) return false
    if (unknownFields != other.unknownFields) return false
    if (hypervisorType != other.hypervisorType) return false
    if (numberOfCpuCores != other.numberOfCpuCores) return false
    if (ramSizeBytes != other.ramSizeBytes) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + hypervisorType.hashCode()
      result = result * 37 + numberOfCpuCores.hashCode()
      result = result * 37 + ramSizeBytes.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """hypervisorType=$hypervisorType"""
    result += """numberOfCpuCores=$numberOfCpuCores"""
    result += """ramSizeBytes=$ramSizeBytes"""
    return result.joinToString(prefix = "VmConfiguration{", separator = ", ", postfix = "}")
  }

  fun copy(
    hypervisorType: VmHypervisorType = this.hypervisorType,
    numberOfCpuCores: Int = this.numberOfCpuCores,
    ramSizeBytes: Long = this.ramSizeBytes,
    unknownFields: ByteString = this.unknownFields
  ): VmConfiguration = VmConfiguration(hypervisorType, numberOfCpuCores, ramSizeBytes,
      unknownFields)

  class Builder : Message.Builder<VmConfiguration, Builder>() {
    @JvmField
    var hypervisorType: VmHypervisorType = VmHypervisorType.UNKNOWN

    @JvmField
    var numberOfCpuCores: Int = 0

    @JvmField
    var ramSizeBytes: Long = 0L

    fun hypervisorType(hypervisorType: VmHypervisorType): Builder {
      this.hypervisorType = hypervisorType
      return this
    }

    fun numberOfCpuCores(numberOfCpuCores: Int): Builder {
      this.numberOfCpuCores = numberOfCpuCores
      return this
    }

    fun ramSizeBytes(ramSizeBytes: Long): Builder {
      this.ramSizeBytes = ramSizeBytes
      return this
    }

    override fun build(): VmConfiguration = VmConfiguration(
      hypervisorType = hypervisorType,
      numberOfCpuCores = numberOfCpuCores,
      ramSizeBytes = ramSizeBytes,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<VmConfiguration> = object : ProtoAdapter<VmConfiguration>(
      FieldEncoding.LENGTH_DELIMITED, 
      VmConfiguration::class, 
      "type.googleapis.com/android.emulation.control.VmConfiguration", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: VmConfiguration): Int {
        var size = value.unknownFields.size
        if (value.hypervisorType != VmHypervisorType.UNKNOWN) size +=
            VmHypervisorType.ADAPTER.encodedSizeWithTag(1, value.hypervisorType)
        if (value.numberOfCpuCores != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(2,
            value.numberOfCpuCores)
        if (value.ramSizeBytes != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(3,
            value.ramSizeBytes)
        return size
      }

      override fun encode(writer: ProtoWriter, value: VmConfiguration) {
        if (value.hypervisorType != VmHypervisorType.UNKNOWN)
            VmHypervisorType.ADAPTER.encodeWithTag(writer, 1, value.hypervisorType)
        if (value.numberOfCpuCores != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2,
            value.numberOfCpuCores)
        if (value.ramSizeBytes != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 3,
            value.ramSizeBytes)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): VmConfiguration {
        var hypervisorType: VmHypervisorType = VmHypervisorType.UNKNOWN
        var numberOfCpuCores: Int = 0
        var ramSizeBytes: Long = 0L
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> try {
              hypervisorType = VmHypervisorType.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            2 -> numberOfCpuCores = ProtoAdapter.INT32.decode(reader)
            3 -> ramSizeBytes = ProtoAdapter.INT64.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return VmConfiguration(
          hypervisorType = hypervisorType,
          numberOfCpuCores = numberOfCpuCores,
          ramSizeBytes = ramSizeBytes,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: VmConfiguration): VmConfiguration = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  enum class VmHypervisorType(
    override val value: Int
  ) : WireEnum {
    /**
     * An unknown hypervisor
     */
    UNKNOWN(0),

    /**
     * No hypervisor is in use. This usually means that the guest is
     * running on a different CPU than the host, or you are using a
     * platform where no hypervisor is available.
     */
    NONE(1),

    /**
     * The Kernel based Virtual Machine
     * (https://www.linux-kvm.org/page/Main_Page)
     */
    KVM(2),

    /**
     * Intel® Hardware Accelerated Execution Manager (Intel® HAXM)
     * https://github.com/intel/haxm
     */
    HAXM(3),

    /**
     * Hypervisor Framework.
     * https://developer.apple.com/documentation/hypervisor
     */
    HVF(4),

    /**
     * Window Hypervisor Platform
     * https://docs.microsoft.com/en-us/virtualization/api/
     */
    WHPX(5),

    GVM(6);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<VmHypervisorType> = object : EnumAdapter<VmHypervisorType>(
        VmHypervisorType::class, 
        PROTO_3, 
        VmHypervisorType.UNKNOWN
      ) {
        override fun fromValue(value: Int): VmHypervisorType? = VmHypervisorType.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): VmHypervisorType? = when (value) {
        0 -> UNKNOWN
        1 -> NONE
        2 -> KVM
        3 -> HAXM
        4 -> HVF
        5 -> WHPX
        6 -> GVM
        else -> null
      }
    }
  }
}
