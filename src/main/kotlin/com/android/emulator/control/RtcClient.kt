// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.Rtc in rtc_service.proto
package com.android.emulator.control

import com.squareup.wire.GrpcCall
import com.squareup.wire.GrpcStreamingCall
import com.squareup.wire.Service
import kotlin.Unit

/**
 * An RTC service lets you interact with the emulator through WebRTC
 * Note that this is currently an experimental feature, and that the
 * service definition might change without notice. Use at your own risk!
 *
 * The following endpoints are needed to establish the webrtc protocol
 * Due to limitiations in Javascript we cannot make use of bidirectional
 * endpoints See this [blog](https://grpc.io/blog/state-of-grpc-web) for
 * details.
 */
interface RtcClient : Service {
  /**
   * This function will generate a new identifier that the client
   * should use for further interaction. It will initiate the
   * JSEP protocol on the server side.
   */
  fun requestRtcStream(): GrpcCall<Unit, RtcId>

  /**
   * Sends the given JsepMsg to the server. The RtcId in the
   * message should point to an active stream negotiation in
   * progress, otherwise the message will be ignored.
   */
  fun sendJsepMessage(): GrpcCall<JsepMsg, Unit>

  /**
   * Reads an available jsep messages for the given client id,
   * blocking until one becomes available. Do not use the polling version
   * above if you opt for this one.
   *
   * The ice candidates for example will trickle in on this callback,
   * as will the SDP negotation.
   */
  fun receiveJsepMessages(): GrpcStreamingCall<RtcId, JsepMsg>

  /**
   * [DEPRECATED] This is only here as the go grpc webproxy used
   * by fuchsia does not support server side streaming. This method
   * will be removed in the future and should not be relied upon.
   *
   * Reads an available jsep messages for the given client id,
   * blocking until one becomes available. Do not use the polling version
   * above if you opt for this one.
   *
   * The ice candidates for example will trickle in on this callback,
   * as will the SDP negotation.
   */
  fun receiveJsepMessage(): GrpcCall<RtcId, JsepMsg>
}
