// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.EmulatorStatus in emulator_controller.proto
package com.android.emulator.control

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class EmulatorStatus(
  /**
   * The emulator version string.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val version: String = "",
  /**
   * The time the emulator has been active in .ms
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val uptime: Long = 0L,
  /**
   * True if the device has completed booting.
   * For P and later this information will accurate,
   * for older images we rely on adb.
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val booted: Boolean = false,
  /**
   * The current vm configuration
   */
  @field:WireField(
    tag = 4,
    adapter = "com.android.emulator.control.VmConfiguration#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val vmConfig: VmConfiguration? = null,
  /**
   * The hardware configuration of the running emulator as
   * key valure pairs.
   */
  @field:WireField(
    tag = 5,
    adapter = "com.android.emulator.control.EntryList#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val hardwareConfig: EntryList? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<EmulatorStatus, EmulatorStatus.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.version = version
    builder.uptime = uptime
    builder.booted = booted
    builder.vmConfig = vmConfig
    builder.hardwareConfig = hardwareConfig
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is EmulatorStatus) return false
    if (unknownFields != other.unknownFields) return false
    if (version != other.version) return false
    if (uptime != other.uptime) return false
    if (booted != other.booted) return false
    if (vmConfig != other.vmConfig) return false
    if (hardwareConfig != other.hardwareConfig) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + version.hashCode()
      result = result * 37 + uptime.hashCode()
      result = result * 37 + booted.hashCode()
      result = result * 37 + vmConfig.hashCode()
      result = result * 37 + hardwareConfig.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """version=${sanitize(version)}"""
    result += """uptime=$uptime"""
    result += """booted=$booted"""
    if (vmConfig != null) result += """vmConfig=$vmConfig"""
    if (hardwareConfig != null) result += """hardwareConfig=$hardwareConfig"""
    return result.joinToString(prefix = "EmulatorStatus{", separator = ", ", postfix = "}")
  }

  fun copy(
    version: String = this.version,
    uptime: Long = this.uptime,
    booted: Boolean = this.booted,
    vmConfig: VmConfiguration? = this.vmConfig,
    hardwareConfig: EntryList? = this.hardwareConfig,
    unknownFields: ByteString = this.unknownFields
  ): EmulatorStatus = EmulatorStatus(version, uptime, booted, vmConfig, hardwareConfig,
      unknownFields)

  class Builder : Message.Builder<EmulatorStatus, Builder>() {
    @JvmField
    var version: String = ""

    @JvmField
    var uptime: Long = 0L

    @JvmField
    var booted: Boolean = false

    @JvmField
    var vmConfig: VmConfiguration? = null

    @JvmField
    var hardwareConfig: EntryList? = null

    /**
     * The emulator version string.
     */
    fun version(version: String): Builder {
      this.version = version
      return this
    }

    /**
     * The time the emulator has been active in .ms
     */
    fun uptime(uptime: Long): Builder {
      this.uptime = uptime
      return this
    }

    /**
     * True if the device has completed booting.
     * For P and later this information will accurate,
     * for older images we rely on adb.
     */
    fun booted(booted: Boolean): Builder {
      this.booted = booted
      return this
    }

    /**
     * The current vm configuration
     */
    fun vmConfig(vmConfig: VmConfiguration?): Builder {
      this.vmConfig = vmConfig
      return this
    }

    /**
     * The hardware configuration of the running emulator as
     * key valure pairs.
     */
    fun hardwareConfig(hardwareConfig: EntryList?): Builder {
      this.hardwareConfig = hardwareConfig
      return this
    }

    override fun build(): EmulatorStatus = EmulatorStatus(
      version = version,
      uptime = uptime,
      booted = booted,
      vmConfig = vmConfig,
      hardwareConfig = hardwareConfig,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<EmulatorStatus> = object : ProtoAdapter<EmulatorStatus>(
      FieldEncoding.LENGTH_DELIMITED, 
      EmulatorStatus::class, 
      "type.googleapis.com/android.emulation.control.EmulatorStatus", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: EmulatorStatus): Int {
        var size = value.unknownFields.size
        if (value.version != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.version)
        if (value.uptime != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(2, value.uptime)
        if (value.booted != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(3, value.booted)
        if (value.vmConfig != null) size += VmConfiguration.ADAPTER.encodedSizeWithTag(4,
            value.vmConfig)
        if (value.hardwareConfig != null) size += EntryList.ADAPTER.encodedSizeWithTag(5,
            value.hardwareConfig)
        return size
      }

      override fun encode(writer: ProtoWriter, value: EmulatorStatus) {
        if (value.version != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.version)
        if (value.uptime != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.uptime)
        if (value.booted != false) ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.booted)
        if (value.vmConfig != null) VmConfiguration.ADAPTER.encodeWithTag(writer, 4, value.vmConfig)
        if (value.hardwareConfig != null) EntryList.ADAPTER.encodeWithTag(writer, 5,
            value.hardwareConfig)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): EmulatorStatus {
        var version: String = ""
        var uptime: Long = 0L
        var booted: Boolean = false
        var vmConfig: VmConfiguration? = null
        var hardwareConfig: EntryList? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> version = ProtoAdapter.STRING.decode(reader)
            2 -> uptime = ProtoAdapter.UINT64.decode(reader)
            3 -> booted = ProtoAdapter.BOOL.decode(reader)
            4 -> vmConfig = VmConfiguration.ADAPTER.decode(reader)
            5 -> hardwareConfig = EntryList.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return EmulatorStatus(
          version = version,
          uptime = uptime,
          booted = booted,
          vmConfig = vmConfig,
          hardwareConfig = hardwareConfig,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: EmulatorStatus): EmulatorStatus = value.copy(
        vmConfig = value.vmConfig?.let(VmConfiguration.ADAPTER::redact),
        hardwareConfig = value.hardwareConfig?.let(EntryList.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
