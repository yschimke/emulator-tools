// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.PhoneCall in emulator_controller.proto
package com.android.emulator.control

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import okio.ByteString

class PhoneCall(
  @field:WireField(
    tag = 1,
    adapter = "com.android.emulator.control.PhoneCall${'$'}Operation#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val operation: Operation = Operation.InitCall,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val number: String = "",
  unknownFields: ByteString = ByteString.EMPTY
) : Message<PhoneCall, PhoneCall.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.operation = operation
    builder.number = number
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is PhoneCall) return false
    if (unknownFields != other.unknownFields) return false
    if (operation != other.operation) return false
    if (number != other.number) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + operation.hashCode()
      result = result * 37 + number.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """operation=$operation"""
    result += """number=${sanitize(number)}"""
    return result.joinToString(prefix = "PhoneCall{", separator = ", ", postfix = "}")
  }

  fun copy(
    operation: Operation = this.operation,
    number: String = this.number,
    unknownFields: ByteString = this.unknownFields
  ): PhoneCall = PhoneCall(operation, number, unknownFields)

  class Builder : Message.Builder<PhoneCall, Builder>() {
    @JvmField
    var operation: Operation = Operation.InitCall

    @JvmField
    var number: String = ""

    fun operation(operation: Operation): Builder {
      this.operation = operation
      return this
    }

    fun number(number: String): Builder {
      this.number = number
      return this
    }

    override fun build(): PhoneCall = PhoneCall(
      operation = operation,
      number = number,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<PhoneCall> = object : ProtoAdapter<PhoneCall>(
      FieldEncoding.LENGTH_DELIMITED, 
      PhoneCall::class, 
      "type.googleapis.com/android.emulation.control.PhoneCall", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: PhoneCall): Int {
        var size = value.unknownFields.size
        if (value.operation != Operation.InitCall) size += Operation.ADAPTER.encodedSizeWithTag(1,
            value.operation)
        if (value.number != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.number)
        return size
      }

      override fun encode(writer: ProtoWriter, value: PhoneCall) {
        if (value.operation != Operation.InitCall) Operation.ADAPTER.encodeWithTag(writer, 1,
            value.operation)
        if (value.number != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.number)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): PhoneCall {
        var operation: Operation = Operation.InitCall
        var number: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> try {
              operation = Operation.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            2 -> number = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return PhoneCall(
          operation = operation,
          number = number,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: PhoneCall): PhoneCall = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  enum class Operation(
    override val value: Int
  ) : WireEnum {
    InitCall(0),

    AcceptCall(1),

    RejectCallExplicit(2),

    RejectCallBusy(3),

    DisconnectCall(4),

    PlaceCallOnHold(5),

    TakeCallOffHold(6);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Operation> = object : EnumAdapter<Operation>(
        Operation::class, 
        PROTO_3, 
        Operation.InitCall
      ) {
        override fun fromValue(value: Int): Operation? = Operation.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): Operation? = when (value) {
        0 -> InitCall
        1 -> AcceptCall
        2 -> RejectCallExplicit
        3 -> RejectCallBusy
        4 -> DisconnectCall
        5 -> PlaceCallOnHold
        6 -> TakeCallOffHold
        else -> null
      }
    }
  }
}
