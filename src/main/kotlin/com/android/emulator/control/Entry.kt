// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.Entry in emulator_controller.proto
package com.android.emulator.control

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class Entry(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val key: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val value: String = "",
  unknownFields: ByteString = ByteString.EMPTY
) : Message<Entry, Entry.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.key = key
    builder.value = value
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Entry) return false
    if (unknownFields != other.unknownFields) return false
    if (key != other.key) return false
    if (value != other.value) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + key.hashCode()
      result = result * 37 + value.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """key=${sanitize(key)}"""
    result += """value=${sanitize(value)}"""
    return result.joinToString(prefix = "Entry{", separator = ", ", postfix = "}")
  }

  fun copy(
    key: String = this.key,
    value: String = this.value,
    unknownFields: ByteString = this.unknownFields
  ): Entry = Entry(key, value, unknownFields)

  class Builder : Message.Builder<Entry, Builder>() {
    @JvmField
    var key: String = ""

    @JvmField
    var value: String = ""

    fun key(key: String): Builder {
      this.key = key
      return this
    }

    fun value(value: String): Builder {
      this.value = value
      return this
    }

    override fun build(): Entry = Entry(
      key = key,
      value = value,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<Entry> = object : ProtoAdapter<Entry>(
      FieldEncoding.LENGTH_DELIMITED, 
      Entry::class, 
      "type.googleapis.com/android.emulation.control.Entry", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: Entry): Int {
        var size = value.unknownFields.size
        if (value.key != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.key)
        if (value.value != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.value)
        return size
      }

      override fun encode(writer: ProtoWriter, value: Entry) {
        if (value.key != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.key)
        if (value.value != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.value)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): Entry {
        var key: String = ""
        var value: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> key = ProtoAdapter.STRING.decode(reader)
            2 -> value = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Entry(
          key = key,
          value = value,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: Entry): Entry = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
