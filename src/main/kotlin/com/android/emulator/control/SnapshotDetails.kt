// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.SnapshotDetails in snapshot_service.proto
package com.android.emulator.control

import com.android.emulator.snapshot.Snapshot
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class SnapshotDetails(
  /**
   * The id of this snapshot. Use this id to load/delete/pull the
   * snapshot.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "snapshotId"
  )
  @JvmField
  val snapshot_id: String = "",
  /**
   * Detailed information about this snapshot. This contains a detailed
   * hardware description of the snapshot. These details are the same
   * as the "snapshot.pb" file found in an exported snapshot.
   * Look at the import file for a detailed description of the available
   * fields.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.android.emulator.snapshot.Snapshot#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val details: Snapshot? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<SnapshotDetails, SnapshotDetails.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.snapshot_id = snapshot_id
    builder.details = details
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is SnapshotDetails) return false
    if (unknownFields != other.unknownFields) return false
    if (snapshot_id != other.snapshot_id) return false
    if (details != other.details) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + snapshot_id.hashCode()
      result = result * 37 + details.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """snapshot_id=${sanitize(snapshot_id)}"""
    if (details != null) result += """details=$details"""
    return result.joinToString(prefix = "SnapshotDetails{", separator = ", ", postfix = "}")
  }

  fun copy(
    snapshot_id: String = this.snapshot_id,
    details: Snapshot? = this.details,
    unknownFields: ByteString = this.unknownFields
  ): SnapshotDetails = SnapshotDetails(snapshot_id, details, unknownFields)

  class Builder : Message.Builder<SnapshotDetails, Builder>() {
    @JvmField
    var snapshot_id: String = ""

    @JvmField
    var details: Snapshot? = null

    /**
     * The id of this snapshot. Use this id to load/delete/pull the
     * snapshot.
     */
    fun snapshot_id(snapshot_id: String): Builder {
      this.snapshot_id = snapshot_id
      return this
    }

    /**
     * Detailed information about this snapshot. This contains a detailed
     * hardware description of the snapshot. These details are the same
     * as the "snapshot.pb" file found in an exported snapshot.
     * Look at the import file for a detailed description of the available
     * fields.
     */
    fun details(details: Snapshot?): Builder {
      this.details = details
      return this
    }

    override fun build(): SnapshotDetails = SnapshotDetails(
      snapshot_id = snapshot_id,
      details = details,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<SnapshotDetails> = object : ProtoAdapter<SnapshotDetails>(
      FieldEncoding.LENGTH_DELIMITED, 
      SnapshotDetails::class, 
      "type.googleapis.com/android.emulation.control.SnapshotDetails", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: SnapshotDetails): Int {
        var size = value.unknownFields.size
        if (value.snapshot_id != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1,
            value.snapshot_id)
        if (value.details != null) size += Snapshot.ADAPTER.encodedSizeWithTag(2, value.details)
        return size
      }

      override fun encode(writer: ProtoWriter, value: SnapshotDetails) {
        if (value.snapshot_id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.snapshot_id)
        if (value.details != null) Snapshot.ADAPTER.encodeWithTag(writer, 2, value.details)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): SnapshotDetails {
        var snapshot_id: String = ""
        var details: Snapshot? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> snapshot_id = ProtoAdapter.STRING.decode(reader)
            2 -> details = Snapshot.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return SnapshotDetails(
          snapshot_id = snapshot_id,
          details = details,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: SnapshotDetails): SnapshotDetails = value.copy(
        details = value.details?.let(Snapshot.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
