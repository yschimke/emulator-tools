// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.RtcId in rtc_service.proto
package com.android.emulator.control

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class RtcId(
  /**
   * The unique identifier of this connection. You will have to use the
   * same identifier when sending/receiving messages. The server will
   * generate a guid when receiving the start message.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val guid: String = "",
  unknownFields: ByteString = ByteString.EMPTY
) : Message<RtcId, RtcId.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.guid = guid
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is RtcId) return false
    if (unknownFields != other.unknownFields) return false
    if (guid != other.guid) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + guid.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """guid=${sanitize(guid)}"""
    return result.joinToString(prefix = "RtcId{", separator = ", ", postfix = "}")
  }

  fun copy(guid: String = this.guid, unknownFields: ByteString = this.unknownFields): RtcId =
      RtcId(guid, unknownFields)

  class Builder : Message.Builder<RtcId, Builder>() {
    @JvmField
    var guid: String = ""

    /**
     * The unique identifier of this connection. You will have to use the
     * same identifier when sending/receiving messages. The server will
     * generate a guid when receiving the start message.
     */
    fun guid(guid: String): Builder {
      this.guid = guid
      return this
    }

    override fun build(): RtcId = RtcId(
      guid = guid,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<RtcId> = object : ProtoAdapter<RtcId>(
      FieldEncoding.LENGTH_DELIMITED, 
      RtcId::class, 
      "type.googleapis.com/android.emulation.control.RtcId", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: RtcId): Int {
        var size = value.unknownFields.size
        if (value.guid != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.guid)
        return size
      }

      override fun encode(writer: ProtoWriter, value: RtcId) {
        if (value.guid != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.guid)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): RtcId {
        var guid: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> guid = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return RtcId(
          guid = guid,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: RtcId): RtcId = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
