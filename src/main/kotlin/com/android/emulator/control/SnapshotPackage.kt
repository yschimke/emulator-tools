// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.SnapshotPackage in snapshot_service.proto
package com.android.emulator.control

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import okio.ByteString

class SnapshotPackage(
  /**
   * The identifier to the snapshot, only required for the first message.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "snapshotId"
  )
  @JvmField
  val snapshot_id: String = "",
  /**
   * A stream of bytes. Encoded as a tar (possibly gzipped) file pendinf on the
   * value of format.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val payload: ByteString = ByteString.EMPTY,
  /**
   * [Output only] status fields, usually indicates end of transmission.
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val success: Boolean = false,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val err: ByteString = ByteString.EMPTY,
  /**
   * Format of the payload. Only required for the first message.
   */
  @field:WireField(
    tag = 5,
    adapter = "com.android.emulator.control.SnapshotPackage${'$'}Format#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val format: Format = Format.TARGZ,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<SnapshotPackage, SnapshotPackage.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.snapshot_id = snapshot_id
    builder.payload = payload
    builder.success = success
    builder.err = err
    builder.format = format
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is SnapshotPackage) return false
    if (unknownFields != other.unknownFields) return false
    if (snapshot_id != other.snapshot_id) return false
    if (payload != other.payload) return false
    if (success != other.success) return false
    if (err != other.err) return false
    if (format != other.format) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + snapshot_id.hashCode()
      result = result * 37 + payload.hashCode()
      result = result * 37 + success.hashCode()
      result = result * 37 + err.hashCode()
      result = result * 37 + format.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """snapshot_id=${sanitize(snapshot_id)}"""
    result += """payload=$payload"""
    result += """success=$success"""
    result += """err=$err"""
    result += """format=$format"""
    return result.joinToString(prefix = "SnapshotPackage{", separator = ", ", postfix = "}")
  }

  fun copy(
    snapshot_id: String = this.snapshot_id,
    payload: ByteString = this.payload,
    success: Boolean = this.success,
    err: ByteString = this.err,
    format: Format = this.format,
    unknownFields: ByteString = this.unknownFields
  ): SnapshotPackage = SnapshotPackage(snapshot_id, payload, success, err, format, unknownFields)

  class Builder : Message.Builder<SnapshotPackage, Builder>() {
    @JvmField
    var snapshot_id: String = ""

    @JvmField
    var payload: ByteString = ByteString.EMPTY

    @JvmField
    var success: Boolean = false

    @JvmField
    var err: ByteString = ByteString.EMPTY

    @JvmField
    var format: Format = Format.TARGZ

    /**
     * The identifier to the snapshot, only required for the first message.
     */
    fun snapshot_id(snapshot_id: String): Builder {
      this.snapshot_id = snapshot_id
      return this
    }

    /**
     * A stream of bytes. Encoded as a tar (possibly gzipped) file pendinf on the
     * value of format.
     */
    fun payload(payload: ByteString): Builder {
      this.payload = payload
      return this
    }

    /**
     * [Output only] status fields, usually indicates end of transmission.
     */
    fun success(success: Boolean): Builder {
      this.success = success
      return this
    }

    fun err(err: ByteString): Builder {
      this.err = err
      return this
    }

    /**
     * Format of the payload. Only required for the first message.
     */
    fun format(format: Format): Builder {
      this.format = format
      return this
    }

    override fun build(): SnapshotPackage = SnapshotPackage(
      snapshot_id = snapshot_id,
      payload = payload,
      success = success,
      err = err,
      format = format,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<SnapshotPackage> = object : ProtoAdapter<SnapshotPackage>(
      FieldEncoding.LENGTH_DELIMITED, 
      SnapshotPackage::class, 
      "type.googleapis.com/android.emulation.control.SnapshotPackage", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: SnapshotPackage): Int {
        var size = value.unknownFields.size
        if (value.snapshot_id != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1,
            value.snapshot_id)
        if (value.payload != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(2,
            value.payload)
        if (value.success != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(3, value.success)
        if (value.err != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(4,
            value.err)
        if (value.format != Format.TARGZ) size += Format.ADAPTER.encodedSizeWithTag(5, value.format)
        return size
      }

      override fun encode(writer: ProtoWriter, value: SnapshotPackage) {
        if (value.snapshot_id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.snapshot_id)
        if (value.payload != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 2,
            value.payload)
        if (value.success != false) ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.success)
        if (value.err != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 4, value.err)
        if (value.format != Format.TARGZ) Format.ADAPTER.encodeWithTag(writer, 5, value.format)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): SnapshotPackage {
        var snapshot_id: String = ""
        var payload: ByteString = ByteString.EMPTY
        var success: Boolean = false
        var err: ByteString = ByteString.EMPTY
        var format: Format = Format.TARGZ
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> snapshot_id = ProtoAdapter.STRING.decode(reader)
            2 -> payload = ProtoAdapter.BYTES.decode(reader)
            3 -> success = ProtoAdapter.BOOL.decode(reader)
            4 -> err = ProtoAdapter.BYTES.decode(reader)
            5 -> try {
              format = Format.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            else -> reader.readUnknownField(tag)
          }
        }
        return SnapshotPackage(
          snapshot_id = snapshot_id,
          payload = payload,
          success = success,
          err = err,
          format = format,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: SnapshotPackage): SnapshotPackage = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  enum class Format(
    override val value: Int
  ) : WireEnum {
    TARGZ(0),

    TAR(1);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Format> = object : EnumAdapter<Format>(
        Format::class, 
        PROTO_3, 
        Format.TARGZ
      ) {
        override fun fromValue(value: Int): Format? = Format.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): Format? = when (value) {
        0 -> TARGZ
        1 -> TAR
        else -> null
      }
    }
  }
}
