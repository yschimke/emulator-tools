// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.GpsState in emulator_controller.proto
package com.android.emulator.control

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class GpsState(
  /**
   * Setting this to false will disable auto updating  from the LocationUI,
   * otherwise the location UI will override the location at a frequency of 1hz.
   *
   * - This is unused if the emulator is launched with -no-window, or when he
   *   location ui is disabled.
   * - This will BREAK the location ui experience if it is set to false. For
   *    example routing will no longer function.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val passiveUpdate: Boolean = false,
  /**
   * The latitude, in degrees.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val latitude: Double = 0.0,
  /**
   * The longitude, in degrees.
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val longitude: Double = 0.0,
  /**
   * The speed if it is available, in meters/second over ground
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val speed: Double = 0.0,
  /**
   * gets the horizontal direction of travel of this device, and is not
   * related to the device orientation. It is guaranteed to be in the
   * range [0.0, 360.0] if the device has a bearing. 0=North, 90=East,
   * 180=South, etc..
   */
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val bearing: Double = 0.0,
  /**
   * The altitude if available, in meters above the WGS 84 reference
   * ellipsoid.
   */
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val altitude: Double = 0.0,
  /**
   * The number of satellites used to derive the fix
   */
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val satellites: Int = 0,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<GpsState, GpsState.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.passiveUpdate = passiveUpdate
    builder.latitude = latitude
    builder.longitude = longitude
    builder.speed = speed
    builder.bearing = bearing
    builder.altitude = altitude
    builder.satellites = satellites
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is GpsState) return false
    if (unknownFields != other.unknownFields) return false
    if (passiveUpdate != other.passiveUpdate) return false
    if (latitude != other.latitude) return false
    if (longitude != other.longitude) return false
    if (speed != other.speed) return false
    if (bearing != other.bearing) return false
    if (altitude != other.altitude) return false
    if (satellites != other.satellites) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + passiveUpdate.hashCode()
      result = result * 37 + latitude.hashCode()
      result = result * 37 + longitude.hashCode()
      result = result * 37 + speed.hashCode()
      result = result * 37 + bearing.hashCode()
      result = result * 37 + altitude.hashCode()
      result = result * 37 + satellites.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """passiveUpdate=$passiveUpdate"""
    result += """latitude=$latitude"""
    result += """longitude=$longitude"""
    result += """speed=$speed"""
    result += """bearing=$bearing"""
    result += """altitude=$altitude"""
    result += """satellites=$satellites"""
    return result.joinToString(prefix = "GpsState{", separator = ", ", postfix = "}")
  }

  fun copy(
    passiveUpdate: Boolean = this.passiveUpdate,
    latitude: Double = this.latitude,
    longitude: Double = this.longitude,
    speed: Double = this.speed,
    bearing: Double = this.bearing,
    altitude: Double = this.altitude,
    satellites: Int = this.satellites,
    unknownFields: ByteString = this.unknownFields
  ): GpsState = GpsState(passiveUpdate, latitude, longitude, speed, bearing, altitude, satellites,
      unknownFields)

  class Builder : Message.Builder<GpsState, Builder>() {
    @JvmField
    var passiveUpdate: Boolean = false

    @JvmField
    var latitude: Double = 0.0

    @JvmField
    var longitude: Double = 0.0

    @JvmField
    var speed: Double = 0.0

    @JvmField
    var bearing: Double = 0.0

    @JvmField
    var altitude: Double = 0.0

    @JvmField
    var satellites: Int = 0

    /**
     * Setting this to false will disable auto updating  from the LocationUI,
     * otherwise the location UI will override the location at a frequency of 1hz.
     *
     * - This is unused if the emulator is launched with -no-window, or when he
     *   location ui is disabled.
     * - This will BREAK the location ui experience if it is set to false. For
     *    example routing will no longer function.
     */
    fun passiveUpdate(passiveUpdate: Boolean): Builder {
      this.passiveUpdate = passiveUpdate
      return this
    }

    /**
     * The latitude, in degrees.
     */
    fun latitude(latitude: Double): Builder {
      this.latitude = latitude
      return this
    }

    /**
     * The longitude, in degrees.
     */
    fun longitude(longitude: Double): Builder {
      this.longitude = longitude
      return this
    }

    /**
     * The speed if it is available, in meters/second over ground
     */
    fun speed(speed: Double): Builder {
      this.speed = speed
      return this
    }

    /**
     * gets the horizontal direction of travel of this device, and is not
     * related to the device orientation. It is guaranteed to be in the
     * range [0.0, 360.0] if the device has a bearing. 0=North, 90=East,
     * 180=South, etc..
     */
    fun bearing(bearing: Double): Builder {
      this.bearing = bearing
      return this
    }

    /**
     * The altitude if available, in meters above the WGS 84 reference
     * ellipsoid.
     */
    fun altitude(altitude: Double): Builder {
      this.altitude = altitude
      return this
    }

    /**
     * The number of satellites used to derive the fix
     */
    fun satellites(satellites: Int): Builder {
      this.satellites = satellites
      return this
    }

    override fun build(): GpsState = GpsState(
      passiveUpdate = passiveUpdate,
      latitude = latitude,
      longitude = longitude,
      speed = speed,
      bearing = bearing,
      altitude = altitude,
      satellites = satellites,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<GpsState> = object : ProtoAdapter<GpsState>(
      FieldEncoding.LENGTH_DELIMITED, 
      GpsState::class, 
      "type.googleapis.com/android.emulation.control.GpsState", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: GpsState): Int {
        var size = value.unknownFields.size
        if (value.passiveUpdate != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(1,
            value.passiveUpdate)
        if (value.latitude != 0.0) size += ProtoAdapter.DOUBLE.encodedSizeWithTag(2, value.latitude)
        if (value.longitude != 0.0) size += ProtoAdapter.DOUBLE.encodedSizeWithTag(3,
            value.longitude)
        if (value.speed != 0.0) size += ProtoAdapter.DOUBLE.encodedSizeWithTag(4, value.speed)
        if (value.bearing != 0.0) size += ProtoAdapter.DOUBLE.encodedSizeWithTag(5, value.bearing)
        if (value.altitude != 0.0) size += ProtoAdapter.DOUBLE.encodedSizeWithTag(6, value.altitude)
        if (value.satellites != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(7,
            value.satellites)
        return size
      }

      override fun encode(writer: ProtoWriter, value: GpsState) {
        if (value.passiveUpdate != false) ProtoAdapter.BOOL.encodeWithTag(writer, 1,
            value.passiveUpdate)
        if (value.latitude != 0.0) ProtoAdapter.DOUBLE.encodeWithTag(writer, 2, value.latitude)
        if (value.longitude != 0.0) ProtoAdapter.DOUBLE.encodeWithTag(writer, 3, value.longitude)
        if (value.speed != 0.0) ProtoAdapter.DOUBLE.encodeWithTag(writer, 4, value.speed)
        if (value.bearing != 0.0) ProtoAdapter.DOUBLE.encodeWithTag(writer, 5, value.bearing)
        if (value.altitude != 0.0) ProtoAdapter.DOUBLE.encodeWithTag(writer, 6, value.altitude)
        if (value.satellites != 0) ProtoAdapter.INT32.encodeWithTag(writer, 7, value.satellites)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): GpsState {
        var passiveUpdate: Boolean = false
        var latitude: Double = 0.0
        var longitude: Double = 0.0
        var speed: Double = 0.0
        var bearing: Double = 0.0
        var altitude: Double = 0.0
        var satellites: Int = 0
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> passiveUpdate = ProtoAdapter.BOOL.decode(reader)
            2 -> latitude = ProtoAdapter.DOUBLE.decode(reader)
            3 -> longitude = ProtoAdapter.DOUBLE.decode(reader)
            4 -> speed = ProtoAdapter.DOUBLE.decode(reader)
            5 -> bearing = ProtoAdapter.DOUBLE.decode(reader)
            6 -> altitude = ProtoAdapter.DOUBLE.decode(reader)
            7 -> satellites = ProtoAdapter.INT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return GpsState(
          passiveUpdate = passiveUpdate,
          latitude = latitude,
          longitude = longitude,
          speed = speed,
          bearing = bearing,
          altitude = altitude,
          satellites = satellites,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: GpsState): GpsState = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
