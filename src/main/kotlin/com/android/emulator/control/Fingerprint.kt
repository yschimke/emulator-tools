// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.Fingerprint in emulator_controller.proto
package com.android.emulator.control

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class Fingerprint(
  /**
   * True when the fingprint is touched.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val isTouching: Boolean = false,
  /**
   * The identifier of the registered fingerprint.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val touchId: Int = 0,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<Fingerprint, Fingerprint.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.isTouching = isTouching
    builder.touchId = touchId
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Fingerprint) return false
    if (unknownFields != other.unknownFields) return false
    if (isTouching != other.isTouching) return false
    if (touchId != other.touchId) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + isTouching.hashCode()
      result = result * 37 + touchId.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """isTouching=$isTouching"""
    result += """touchId=$touchId"""
    return result.joinToString(prefix = "Fingerprint{", separator = ", ", postfix = "}")
  }

  fun copy(
    isTouching: Boolean = this.isTouching,
    touchId: Int = this.touchId,
    unknownFields: ByteString = this.unknownFields
  ): Fingerprint = Fingerprint(isTouching, touchId, unknownFields)

  class Builder : Message.Builder<Fingerprint, Builder>() {
    @JvmField
    var isTouching: Boolean = false

    @JvmField
    var touchId: Int = 0

    /**
     * True when the fingprint is touched.
     */
    fun isTouching(isTouching: Boolean): Builder {
      this.isTouching = isTouching
      return this
    }

    /**
     * The identifier of the registered fingerprint.
     */
    fun touchId(touchId: Int): Builder {
      this.touchId = touchId
      return this
    }

    override fun build(): Fingerprint = Fingerprint(
      isTouching = isTouching,
      touchId = touchId,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<Fingerprint> = object : ProtoAdapter<Fingerprint>(
      FieldEncoding.LENGTH_DELIMITED, 
      Fingerprint::class, 
      "type.googleapis.com/android.emulation.control.Fingerprint", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: Fingerprint): Int {
        var size = value.unknownFields.size
        if (value.isTouching != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(1,
            value.isTouching)
        if (value.touchId != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.touchId)
        return size
      }

      override fun encode(writer: ProtoWriter, value: Fingerprint) {
        if (value.isTouching != false) ProtoAdapter.BOOL.encodeWithTag(writer, 1, value.isTouching)
        if (value.touchId != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.touchId)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): Fingerprint {
        var isTouching: Boolean = false
        var touchId: Int = 0
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> isTouching = ProtoAdapter.BOOL.decode(reader)
            2 -> touchId = ProtoAdapter.INT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Fingerprint(
          isTouching = isTouching,
          touchId = touchId,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: Fingerprint): Fingerprint = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
