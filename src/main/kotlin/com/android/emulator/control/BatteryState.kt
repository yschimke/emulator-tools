// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.BatteryState in emulator_controller.proto
package com.android.emulator.control

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import okio.ByteString

class BatteryState(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val hasBattery: Boolean = false,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val isPresent: Boolean = false,
  @field:WireField(
    tag = 3,
    adapter = "com.android.emulator.control.BatteryState${'$'}BatteryCharger#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val charger: BatteryCharger = BatteryCharger.NONE,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val chargeLevel: Int = 0,
  @field:WireField(
    tag = 5,
    adapter = "com.android.emulator.control.BatteryState${'$'}BatteryHealth#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val health: BatteryHealth = BatteryHealth.GOOD,
  @field:WireField(
    tag = 6,
    adapter = "com.android.emulator.control.BatteryState${'$'}BatteryStatus#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val status: BatteryStatus = BatteryStatus.UNKNOWN,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<BatteryState, BatteryState.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.hasBattery = hasBattery
    builder.isPresent = isPresent
    builder.charger = charger
    builder.chargeLevel = chargeLevel
    builder.health = health
    builder.status = status
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is BatteryState) return false
    if (unknownFields != other.unknownFields) return false
    if (hasBattery != other.hasBattery) return false
    if (isPresent != other.isPresent) return false
    if (charger != other.charger) return false
    if (chargeLevel != other.chargeLevel) return false
    if (health != other.health) return false
    if (status != other.status) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + hasBattery.hashCode()
      result = result * 37 + isPresent.hashCode()
      result = result * 37 + charger.hashCode()
      result = result * 37 + chargeLevel.hashCode()
      result = result * 37 + health.hashCode()
      result = result * 37 + status.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """hasBattery=$hasBattery"""
    result += """isPresent=$isPresent"""
    result += """charger=$charger"""
    result += """chargeLevel=$chargeLevel"""
    result += """health=$health"""
    result += """status=$status"""
    return result.joinToString(prefix = "BatteryState{", separator = ", ", postfix = "}")
  }

  fun copy(
    hasBattery: Boolean = this.hasBattery,
    isPresent: Boolean = this.isPresent,
    charger: BatteryCharger = this.charger,
    chargeLevel: Int = this.chargeLevel,
    health: BatteryHealth = this.health,
    status: BatteryStatus = this.status,
    unknownFields: ByteString = this.unknownFields
  ): BatteryState = BatteryState(hasBattery, isPresent, charger, chargeLevel, health, status,
      unknownFields)

  class Builder : Message.Builder<BatteryState, Builder>() {
    @JvmField
    var hasBattery: Boolean = false

    @JvmField
    var isPresent: Boolean = false

    @JvmField
    var charger: BatteryCharger = BatteryCharger.NONE

    @JvmField
    var chargeLevel: Int = 0

    @JvmField
    var health: BatteryHealth = BatteryHealth.GOOD

    @JvmField
    var status: BatteryStatus = BatteryStatus.UNKNOWN

    fun hasBattery(hasBattery: Boolean): Builder {
      this.hasBattery = hasBattery
      return this
    }

    fun isPresent(isPresent: Boolean): Builder {
      this.isPresent = isPresent
      return this
    }

    fun charger(charger: BatteryCharger): Builder {
      this.charger = charger
      return this
    }

    fun chargeLevel(chargeLevel: Int): Builder {
      this.chargeLevel = chargeLevel
      return this
    }

    fun health(health: BatteryHealth): Builder {
      this.health = health
      return this
    }

    fun status(status: BatteryStatus): Builder {
      this.status = status
      return this
    }

    override fun build(): BatteryState = BatteryState(
      hasBattery = hasBattery,
      isPresent = isPresent,
      charger = charger,
      chargeLevel = chargeLevel,
      health = health,
      status = status,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<BatteryState> = object : ProtoAdapter<BatteryState>(
      FieldEncoding.LENGTH_DELIMITED, 
      BatteryState::class, 
      "type.googleapis.com/android.emulation.control.BatteryState", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: BatteryState): Int {
        var size = value.unknownFields.size
        if (value.hasBattery != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(1,
            value.hasBattery)
        if (value.isPresent != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(2,
            value.isPresent)
        if (value.charger != BatteryCharger.NONE) size +=
            BatteryCharger.ADAPTER.encodedSizeWithTag(3, value.charger)
        if (value.chargeLevel != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(4,
            value.chargeLevel)
        if (value.health != BatteryHealth.GOOD) size += BatteryHealth.ADAPTER.encodedSizeWithTag(5,
            value.health)
        if (value.status != BatteryStatus.UNKNOWN) size +=
            BatteryStatus.ADAPTER.encodedSizeWithTag(6, value.status)
        return size
      }

      override fun encode(writer: ProtoWriter, value: BatteryState) {
        if (value.hasBattery != false) ProtoAdapter.BOOL.encodeWithTag(writer, 1, value.hasBattery)
        if (value.isPresent != false) ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.isPresent)
        if (value.charger != BatteryCharger.NONE) BatteryCharger.ADAPTER.encodeWithTag(writer, 3,
            value.charger)
        if (value.chargeLevel != 0) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.chargeLevel)
        if (value.health != BatteryHealth.GOOD) BatteryHealth.ADAPTER.encodeWithTag(writer, 5,
            value.health)
        if (value.status != BatteryStatus.UNKNOWN) BatteryStatus.ADAPTER.encodeWithTag(writer, 6,
            value.status)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): BatteryState {
        var hasBattery: Boolean = false
        var isPresent: Boolean = false
        var charger: BatteryCharger = BatteryCharger.NONE
        var chargeLevel: Int = 0
        var health: BatteryHealth = BatteryHealth.GOOD
        var status: BatteryStatus = BatteryStatus.UNKNOWN
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> hasBattery = ProtoAdapter.BOOL.decode(reader)
            2 -> isPresent = ProtoAdapter.BOOL.decode(reader)
            3 -> try {
              charger = BatteryCharger.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            4 -> chargeLevel = ProtoAdapter.INT32.decode(reader)
            5 -> try {
              health = BatteryHealth.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            6 -> try {
              status = BatteryStatus.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            else -> reader.readUnknownField(tag)
          }
        }
        return BatteryState(
          hasBattery = hasBattery,
          isPresent = isPresent,
          charger = charger,
          chargeLevel = chargeLevel,
          health = health,
          status = status,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: BatteryState): BatteryState = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  enum class BatteryStatus(
    override val value: Int
  ) : WireEnum {
    UNKNOWN(0),

    CHARGING(1),

    DISCHARGING(2),

    NOT_CHARGING(3),

    FULL(4);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<BatteryStatus> = object : EnumAdapter<BatteryStatus>(
        BatteryStatus::class, 
        PROTO_3, 
        BatteryStatus.UNKNOWN
      ) {
        override fun fromValue(value: Int): BatteryStatus? = BatteryStatus.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): BatteryStatus? = when (value) {
        0 -> UNKNOWN
        1 -> CHARGING
        2 -> DISCHARGING
        3 -> NOT_CHARGING
        4 -> FULL
        else -> null
      }
    }
  }

  enum class BatteryCharger(
    override val value: Int
  ) : WireEnum {
    NONE(0),

    AC(1),

    USB(2),

    WIRELESS(3);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<BatteryCharger> = object : EnumAdapter<BatteryCharger>(
        BatteryCharger::class, 
        PROTO_3, 
        BatteryCharger.NONE
      ) {
        override fun fromValue(value: Int): BatteryCharger? = BatteryCharger.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): BatteryCharger? = when (value) {
        0 -> NONE
        1 -> AC
        2 -> USB
        3 -> WIRELESS
        else -> null
      }
    }
  }

  enum class BatteryHealth(
    override val value: Int
  ) : WireEnum {
    GOOD(0),

    FAILED(1),

    DEAD(2),

    OVERVOLTAGE(3),

    OVERHEATED(4);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<BatteryHealth> = object : EnumAdapter<BatteryHealth>(
        BatteryHealth::class, 
        PROTO_3, 
        BatteryHealth.GOOD
      ) {
        override fun fromValue(value: Int): BatteryHealth? = BatteryHealth.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): BatteryHealth? = when (value) {
        0 -> GOOD
        1 -> FAILED
        2 -> DEAD
        3 -> OVERVOLTAGE
        4 -> OVERHEATED
        else -> null
      }
    }
  }
}
