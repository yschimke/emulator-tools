// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.SnapshotService in snapshot_service.proto
package com.android.emulator.control

import com.squareup.wire.GrpcCall
import com.squareup.wire.GrpcClient
import com.squareup.wire.GrpcMethod
import com.squareup.wire.GrpcStreamingCall
import com.squareup.wire.ProtoAdapter
import kotlin.Unit

/**
 * The SnapshotService enables you to list, insert, store, and retrieve
 * snapshots.
 *
 * Currently there are two types of snapshots:
 *
 * - Local (default): These are snapshots that are created locally. They are
 *     stored internally inside qcow2 files and are very efficient. These are
 *     the snapshots usually created by interacting with the UI.
 *
 * - Remote: These are snapshots that have been exported at a certain point.
 *     an exported snapshot is normalized (completely self contained) and
 *     can be imported into an emulator with a similar hardware configuration.
 *
 * Currently the emulator has limited support for importing snapshots:
 * - Once an imported snapshot has been loaded into an emulator it is no longer
 * possible to create new snapshots.
 * - The hardware configuration of the emulator your are pushing a snapshot to
 * must match (or be very similar) to the one you pulled the snapshot from.
 *
 * For example do not expect to be able to restore a snapshot on created on an
 * Intel cpu on an AMD cpu.
 */
class GrpcSnapshotServiceClient(
  private val client: GrpcClient
) : SnapshotServiceClient {
  /**
   * Lists all the valid snapshots that are stored locally for the currently
   * running avd. This includes all the snapshots that were imported (pushed)
   * into this emulator.
   *
   * Returns a list of snapshot_id's and associated details that describes
   * the hardware configuration, logical name, etc of the snapshot.
   */
  override fun ListSnapshots(): GrpcCall<Unit, SnapshotList> = client.newCall(GrpcMethod(
      path = "/android.emulation.control.SnapshotService/ListSnapshots",
      requestAdapter = ProtoAdapter.EMPTY,
      responseAdapter = SnapshotList.ADAPTER
  ))

  /**
   * Pulls down the snapshot stored inside the AVD as a tar.gz/tar stream
   * This will normalize the snapshot, all relevant data to push a snapshot
   * into a similar emulator will be placed inside the tar file.
   *
   * Pulling  down a snapshot will pause the emulator until the snapshots
   * are rebased and ready for exporting. Once the snapshot is rebased
   * the emulator will continue and downloading should commence.
   *
   * Note that pulling .gz stream is slow.
   *
   * You must provide the snapshot_id and (desired) format.
   */
  override fun PullSnapshot(): GrpcStreamingCall<SnapshotPackage, SnapshotPackage> =
      client.newStreamingCall(GrpcMethod(
      path = "/android.emulation.control.SnapshotService/PullSnapshot",
      requestAdapter = SnapshotPackage.ADAPTER,
      responseAdapter = SnapshotPackage.ADAPTER
  ))

  /**
   * Push a tar.gz stream contain the snapshot. The tar file should
   * be a snapshot that was exported through the PullSnapshot in the past.
   * The emulator will try to import the snapshot. The hardware configuration
   * of the current emulator should match the one used for pulling.
   *
   * A detailed description of the snapshot (emulator_snapshot.Snapshot)
   * is stored in the snapshot.pb file inside the tar.
   *
   * You must provide the snapshot_id and format in the first message.
   * Will return success and a possible error message when a failure occurs.
   */
  override fun PushSnapshot(): GrpcStreamingCall<SnapshotPackage, SnapshotPackage> =
      client.newStreamingCall(GrpcMethod(
      path = "/android.emulation.control.SnapshotService/PushSnapshot",
      requestAdapter = SnapshotPackage.ADAPTER,
      responseAdapter = SnapshotPackage.ADAPTER
  ))

  /**
   * Loads the given snapshot inside the emulator and activates it.
   * The device will be in the state as it was when the snapshot was created.
   *
   * You will no longer be able to call Save if this was an imported
   * snapshot that was pushed into this emulator.
   *
   * You must provide the snapshot_id to indicate which snapshot to load
   * Will return success and a possible error message when a failure occurs.
   */
  override fun LoadSnapshot(): GrpcCall<SnapshotPackage, SnapshotPackage> =
      client.newCall(GrpcMethod(
      path = "/android.emulation.control.SnapshotService/LoadSnapshot",
      requestAdapter = SnapshotPackage.ADAPTER,
      responseAdapter = SnapshotPackage.ADAPTER
  ))

  /**
   * Creates as a snapshot of the current state of the emulator.
   * You can only save a snapshot if you never activated (Load) an imported
   * snapshot (Push).
   *
   * For example:
   * - PushSnapshot("some_snap.tar.gz");
   * - LoadSnapshot("some_snap");
   * - SaveSnapshot("same_newer_snap"); // <--- Will currently fail.
   *
   * You can provide the snapshot_id to indicate the name used for storing.
   * Will return success and a possible error message when a failure occurs.
   */
  override fun SaveSnapshot(): GrpcCall<SnapshotPackage, SnapshotPackage> =
      client.newCall(GrpcMethod(
      path = "/android.emulation.control.SnapshotService/SaveSnapshot",
      requestAdapter = SnapshotPackage.ADAPTER,
      responseAdapter = SnapshotPackage.ADAPTER
  ))

  /**
   * Deletes the snapshot with the given snapshot_id from the avd.
   *
   * You must provide the snapshot_id to indicate which snapshot to delete.
   * Will return success and a possible error message when a failure occurs.
   */
  override fun DeleteSnapshot(): GrpcCall<SnapshotPackage, SnapshotPackage> =
      client.newCall(GrpcMethod(
      path = "/android.emulation.control.SnapshotService/DeleteSnapshot",
      requestAdapter = SnapshotPackage.ADAPTER,
      responseAdapter = SnapshotPackage.ADAPTER
  ))

  /**
   * Tracks the given process for automated snapshot creation in case of
   * assert failures.
   *
   * Will return success and a possible error message when a failure occurs.
   * The snapshot_id field will contain the name of the snapshot that
   * will be created. The pid field will contain the process id that is
   * being tracked.
   */
  override fun TrackProcess(): GrpcCall<IceboxTarget, IceboxTarget> = client.newCall(GrpcMethod(
      path = "/android.emulation.control.SnapshotService/TrackProcess",
      requestAdapter = IceboxTarget.ADAPTER,
      responseAdapter = IceboxTarget.ADAPTER
  ))
}
