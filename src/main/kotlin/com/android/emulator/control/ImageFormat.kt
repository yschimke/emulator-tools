// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.ImageFormat in emulator_controller.proto
package com.android.emulator.control

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import okio.ByteString

class ImageFormat(
  /**
   * The (desired) format of the resulting bytes.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.android.emulator.control.ImageFormat${'$'}ImgFormat#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val format: ImgFormat = ImgFormat.PNG,
  /**
   * [Output Only] The rotation of the image. The image will be rotated
   * based upon the coarse grained orientation of the device.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.android.emulator.control.Rotation#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val rotation: Rotation? = null,
  /**
   * The (desired) width of the image. When passed as input
   * the image will be scaled to match the given
   * width, while maintaining the aspect ratio of the device.
   * The returned image will never exceed the given width, but can be less.
   * Omitting this value (or passing in 0) will result in no scaling,
   * and the width of the actual device will be used.
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val width: Int = 0,
  /**
   * The (desired) height of the image.  When passed as input
   * the image will be scaled to match the given
   * height, while maintaining the aspect ratio of the device.
   * The returned image will never exceed the given height, but can be less.
   * Omitting this value (or passing in 0) will result in no scaling,
   * and the height of the actual device will be used.
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val height: Int = 0,
  /**
   * The (desired) display id of the device. Setting this to 0 (or omitting)
   * indicates the main display.
   */
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val display: Int = 0,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<ImageFormat, ImageFormat.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.format = format
    builder.rotation = rotation
    builder.width = width
    builder.height = height
    builder.display = display
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ImageFormat) return false
    if (unknownFields != other.unknownFields) return false
    if (format != other.format) return false
    if (rotation != other.rotation) return false
    if (width != other.width) return false
    if (height != other.height) return false
    if (display != other.display) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + format.hashCode()
      result = result * 37 + rotation.hashCode()
      result = result * 37 + width.hashCode()
      result = result * 37 + height.hashCode()
      result = result * 37 + display.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """format=$format"""
    if (rotation != null) result += """rotation=$rotation"""
    result += """width=$width"""
    result += """height=$height"""
    result += """display=$display"""
    return result.joinToString(prefix = "ImageFormat{", separator = ", ", postfix = "}")
  }

  fun copy(
    format: ImgFormat = this.format,
    rotation: Rotation? = this.rotation,
    width: Int = this.width,
    height: Int = this.height,
    display: Int = this.display,
    unknownFields: ByteString = this.unknownFields
  ): ImageFormat = ImageFormat(format, rotation, width, height, display, unknownFields)

  class Builder : Message.Builder<ImageFormat, Builder>() {
    @JvmField
    var format: ImgFormat = ImgFormat.PNG

    @JvmField
    var rotation: Rotation? = null

    @JvmField
    var width: Int = 0

    @JvmField
    var height: Int = 0

    @JvmField
    var display: Int = 0

    /**
     * The (desired) format of the resulting bytes.
     */
    fun format(format: ImgFormat): Builder {
      this.format = format
      return this
    }

    /**
     * [Output Only] The rotation of the image. The image will be rotated
     * based upon the coarse grained orientation of the device.
     */
    fun rotation(rotation: Rotation?): Builder {
      this.rotation = rotation
      return this
    }

    /**
     * The (desired) width of the image. When passed as input
     * the image will be scaled to match the given
     * width, while maintaining the aspect ratio of the device.
     * The returned image will never exceed the given width, but can be less.
     * Omitting this value (or passing in 0) will result in no scaling,
     * and the width of the actual device will be used.
     */
    fun width(width: Int): Builder {
      this.width = width
      return this
    }

    /**
     * The (desired) height of the image.  When passed as input
     * the image will be scaled to match the given
     * height, while maintaining the aspect ratio of the device.
     * The returned image will never exceed the given height, but can be less.
     * Omitting this value (or passing in 0) will result in no scaling,
     * and the height of the actual device will be used.
     */
    fun height(height: Int): Builder {
      this.height = height
      return this
    }

    /**
     * The (desired) display id of the device. Setting this to 0 (or omitting)
     * indicates the main display.
     */
    fun display(display: Int): Builder {
      this.display = display
      return this
    }

    override fun build(): ImageFormat = ImageFormat(
      format = format,
      rotation = rotation,
      width = width,
      height = height,
      display = display,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<ImageFormat> = object : ProtoAdapter<ImageFormat>(
      FieldEncoding.LENGTH_DELIMITED, 
      ImageFormat::class, 
      "type.googleapis.com/android.emulation.control.ImageFormat", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: ImageFormat): Int {
        var size = value.unknownFields.size
        if (value.format != ImgFormat.PNG) size += ImgFormat.ADAPTER.encodedSizeWithTag(1,
            value.format)
        if (value.rotation != null) size += Rotation.ADAPTER.encodedSizeWithTag(2, value.rotation)
        if (value.width != 0) size += ProtoAdapter.UINT32.encodedSizeWithTag(3, value.width)
        if (value.height != 0) size += ProtoAdapter.UINT32.encodedSizeWithTag(4, value.height)
        if (value.display != 0) size += ProtoAdapter.UINT32.encodedSizeWithTag(5, value.display)
        return size
      }

      override fun encode(writer: ProtoWriter, value: ImageFormat) {
        if (value.format != ImgFormat.PNG) ImgFormat.ADAPTER.encodeWithTag(writer, 1, value.format)
        if (value.rotation != null) Rotation.ADAPTER.encodeWithTag(writer, 2, value.rotation)
        if (value.width != 0) ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.width)
        if (value.height != 0) ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.height)
        if (value.display != 0) ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.display)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): ImageFormat {
        var format: ImgFormat = ImgFormat.PNG
        var rotation: Rotation? = null
        var width: Int = 0
        var height: Int = 0
        var display: Int = 0
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> try {
              format = ImgFormat.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            2 -> rotation = Rotation.ADAPTER.decode(reader)
            3 -> width = ProtoAdapter.UINT32.decode(reader)
            4 -> height = ProtoAdapter.UINT32.decode(reader)
            5 -> display = ProtoAdapter.UINT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ImageFormat(
          format = format,
          rotation = rotation,
          width = width,
          height = height,
          display = display,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: ImageFormat): ImageFormat = value.copy(
        rotation = value.rotation?.let(Rotation.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  enum class ImgFormat(
    override val value: Int
  ) : WireEnum {
    /**
     * Portable Network Graphics format
     * (https://en.wikipedia.org/wiki/Portable_Network_Graphics)
     */
    PNG(0),

    /**
     * Three-channel RGB color model supplemented with a fourth alpha
     * channel. https://en.wikipedia.org/wiki/RGBA_color_model
     * Each pixel consists of 4 bytes.
     */
    RGBA8888(1),

    /**
     * Three-channel RGB color model, each pixel consists of 3 bytes
     */
    RGB888(2);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<ImgFormat> = object : EnumAdapter<ImgFormat>(
        ImgFormat::class, 
        PROTO_3, 
        ImgFormat.PNG
      ) {
        override fun fromValue(value: Int): ImgFormat? = ImgFormat.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): ImgFormat? = when (value) {
        0 -> PNG
        1 -> RGBA8888
        2 -> RGB888
        else -> null
      }
    }
  }
}
