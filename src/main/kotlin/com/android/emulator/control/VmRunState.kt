// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.VmRunState in emulator_controller.proto
package com.android.emulator.control

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import okio.ByteString

/**
 * A Run State that describes the state of the Virtual Machine.
 */
class VmRunState(
  @field:WireField(
    tag = 1,
    adapter = "com.android.emulator.control.VmRunState${'$'}RunState#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val state: RunState = RunState.UNKNOWN,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<VmRunState, VmRunState.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.state = state
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is VmRunState) return false
    if (unknownFields != other.unknownFields) return false
    if (state != other.state) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + state.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """state=$state"""
    return result.joinToString(prefix = "VmRunState{", separator = ", ", postfix = "}")
  }

  fun copy(state: RunState = this.state, unknownFields: ByteString = this.unknownFields): VmRunState
      = VmRunState(state, unknownFields)

  class Builder : Message.Builder<VmRunState, Builder>() {
    @JvmField
    var state: RunState = RunState.UNKNOWN

    fun state(state: RunState): Builder {
      this.state = state
      return this
    }

    override fun build(): VmRunState = VmRunState(
      state = state,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<VmRunState> = object : ProtoAdapter<VmRunState>(
      FieldEncoding.LENGTH_DELIMITED, 
      VmRunState::class, 
      "type.googleapis.com/android.emulation.control.VmRunState", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: VmRunState): Int {
        var size = value.unknownFields.size
        if (value.state != RunState.UNKNOWN) size += RunState.ADAPTER.encodedSizeWithTag(1,
            value.state)
        return size
      }

      override fun encode(writer: ProtoWriter, value: VmRunState) {
        if (value.state != RunState.UNKNOWN) RunState.ADAPTER.encodeWithTag(writer, 1, value.state)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): VmRunState {
        var state: RunState = RunState.UNKNOWN
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> try {
              state = RunState.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            else -> reader.readUnknownField(tag)
          }
        }
        return VmRunState(
          state = state,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: VmRunState): VmRunState = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  enum class RunState(
    override val value: Int
  ) : WireEnum {
    /**
     * The emulator is in an unknown state. You cannot transition to this state.
     */
    UNKNOWN(0),

    /**
     * Guest is actively running. You can transition to this state from the
     * paused state.
     */
    RUNNING(1),

    /**
     * Guest is paused to load a snapshot. You cannot transition to this state.
     */
    RESTORE_VM(2),

    /**
     * Guest has been paused. Transitioning to this state will pause the
     * emulator the guest will not be consuming any cpu cycles.
     */
    PAUSED(3),

    /**
     * Guest is paused to take or export a snapshot. You cannot
     * transition to this state.
     */
    SAVE_VM(4),

    /**
     * System shutdown, note that it is similar to power off. It tries to set
     * the system status and notify guest. The system is likely going to
     * disappear soon and do proper cleanup of resources, possibly taking
     * a snapshot. This is the same behavior as closing the emulator by clicking
     * the X (close) in the user interface.
     */
    SHUTDOWN(5),

    /**
     * Immediately terminate the emulator. No resource cleanup will take place.
     * There is a good change to corrupt the system.
     */
    TERMINATE(7),

    /**
     * Will cause the emulator to reset. This is not a state you can observe.
     */
    RESET(9),

    /**
     * Guest experienced some error state, you cannot transition to this state.
     */
    INTERNAL_ERROR(10);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<RunState> = object : EnumAdapter<RunState>(
        RunState::class, 
        PROTO_3, 
        RunState.UNKNOWN
      ) {
        override fun fromValue(value: Int): RunState? = RunState.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): RunState? = when (value) {
        0 -> UNKNOWN
        1 -> RUNNING
        2 -> RESTORE_VM
        3 -> PAUSED
        4 -> SAVE_VM
        5 -> SHUTDOWN
        7 -> TERMINATE
        9 -> RESET
        10 -> INTERNAL_ERROR
        else -> null
      }
    }
  }
}
