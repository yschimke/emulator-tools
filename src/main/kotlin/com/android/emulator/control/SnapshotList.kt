// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.SnapshotList in snapshot_service.proto
package com.android.emulator.control

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.checkElementsNotNull
import com.squareup.wire.internal.immutableCopyOf
import com.squareup.wire.internal.redactElements
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.collections.List
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * A List of on snapshot details.
 */
class SnapshotList(
  snapshots: List<SnapshotDetails> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY
) : Message<SnapshotList, SnapshotList.Builder>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    adapter = "com.android.emulator.control.SnapshotDetails#ADAPTER",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val snapshots: List<SnapshotDetails> = immutableCopyOf("snapshots", snapshots)

  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.snapshots = snapshots
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is SnapshotList) return false
    if (unknownFields != other.unknownFields) return false
    if (snapshots != other.snapshots) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + snapshots.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (snapshots.isNotEmpty()) result += """snapshots=$snapshots"""
    return result.joinToString(prefix = "SnapshotList{", separator = ", ", postfix = "}")
  }

  fun copy(snapshots: List<SnapshotDetails> = this.snapshots, unknownFields: ByteString =
      this.unknownFields): SnapshotList = SnapshotList(snapshots, unknownFields)

  class Builder : Message.Builder<SnapshotList, Builder>() {
    @JvmField
    var snapshots: List<SnapshotDetails> = emptyList()

    fun snapshots(snapshots: List<SnapshotDetails>): Builder {
      checkElementsNotNull(snapshots)
      this.snapshots = snapshots
      return this
    }

    override fun build(): SnapshotList = SnapshotList(
      snapshots = snapshots,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<SnapshotList> = object : ProtoAdapter<SnapshotList>(
      FieldEncoding.LENGTH_DELIMITED, 
      SnapshotList::class, 
      "type.googleapis.com/android.emulation.control.SnapshotList", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: SnapshotList): Int {
        var size = value.unknownFields.size
        size += SnapshotDetails.ADAPTER.asRepeated().encodedSizeWithTag(1, value.snapshots)
        return size
      }

      override fun encode(writer: ProtoWriter, value: SnapshotList) {
        SnapshotDetails.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.snapshots)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): SnapshotList {
        val snapshots = mutableListOf<SnapshotDetails>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> snapshots.add(SnapshotDetails.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return SnapshotList(
          snapshots = snapshots,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: SnapshotList): SnapshotList = value.copy(
        snapshots = value.snapshots.redactElements(SnapshotDetails.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
