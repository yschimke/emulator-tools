// Code generated by Wire protocol buffer compiler, do not edit.
// Source: android.emulation.control.AudioFormat in emulator_controller.proto
package com.android.emulator.control

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import okio.ByteString

class AudioFormat(
  /**
   * Sampling rate to use, defaulting to 44100 if this is not set.
   * Note, that android devices typically will not use a sampling
   * rate higher than 48kHz. See https://developer.android.com/ndk/guides/audio.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val samplingRate: Long = 0L,
  @field:WireField(
    tag = 2,
    adapter = "com.android.emulator.control.AudioFormat${'$'}Channels#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val channels: Channels = Channels.Mono,
  @field:WireField(
    tag = 3,
    adapter = "com.android.emulator.control.AudioFormat${'$'}SampleFormat#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val format: SampleFormat = SampleFormat.AUD_FMT_U8,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<AudioFormat, AudioFormat.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.samplingRate = samplingRate
    builder.channels = channels
    builder.format = format
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is AudioFormat) return false
    if (unknownFields != other.unknownFields) return false
    if (samplingRate != other.samplingRate) return false
    if (channels != other.channels) return false
    if (format != other.format) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + samplingRate.hashCode()
      result = result * 37 + channels.hashCode()
      result = result * 37 + format.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """samplingRate=$samplingRate"""
    result += """channels=$channels"""
    result += """format=$format"""
    return result.joinToString(prefix = "AudioFormat{", separator = ", ", postfix = "}")
  }

  fun copy(
    samplingRate: Long = this.samplingRate,
    channels: Channels = this.channels,
    format: SampleFormat = this.format,
    unknownFields: ByteString = this.unknownFields
  ): AudioFormat = AudioFormat(samplingRate, channels, format, unknownFields)

  class Builder : Message.Builder<AudioFormat, Builder>() {
    @JvmField
    var samplingRate: Long = 0L

    @JvmField
    var channels: Channels = Channels.Mono

    @JvmField
    var format: SampleFormat = SampleFormat.AUD_FMT_U8

    /**
     * Sampling rate to use, defaulting to 44100 if this is not set.
     * Note, that android devices typically will not use a sampling
     * rate higher than 48kHz. See https://developer.android.com/ndk/guides/audio.
     */
    fun samplingRate(samplingRate: Long): Builder {
      this.samplingRate = samplingRate
      return this
    }

    fun channels(channels: Channels): Builder {
      this.channels = channels
      return this
    }

    fun format(format: SampleFormat): Builder {
      this.format = format
      return this
    }

    override fun build(): AudioFormat = AudioFormat(
      samplingRate = samplingRate,
      channels = channels,
      format = format,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<AudioFormat> = object : ProtoAdapter<AudioFormat>(
      FieldEncoding.LENGTH_DELIMITED, 
      AudioFormat::class, 
      "type.googleapis.com/android.emulation.control.AudioFormat", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: AudioFormat): Int {
        var size = value.unknownFields.size
        if (value.samplingRate != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(1,
            value.samplingRate)
        if (value.channels != Channels.Mono) size += Channels.ADAPTER.encodedSizeWithTag(2,
            value.channels)
        if (value.format != SampleFormat.AUD_FMT_U8) size +=
            SampleFormat.ADAPTER.encodedSizeWithTag(3, value.format)
        return size
      }

      override fun encode(writer: ProtoWriter, value: AudioFormat) {
        if (value.samplingRate != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 1,
            value.samplingRate)
        if (value.channels != Channels.Mono) Channels.ADAPTER.encodeWithTag(writer, 2,
            value.channels)
        if (value.format != SampleFormat.AUD_FMT_U8) SampleFormat.ADAPTER.encodeWithTag(writer, 3,
            value.format)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): AudioFormat {
        var samplingRate: Long = 0L
        var channels: Channels = Channels.Mono
        var format: SampleFormat = SampleFormat.AUD_FMT_U8
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> samplingRate = ProtoAdapter.UINT64.decode(reader)
            2 -> try {
              channels = Channels.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            3 -> try {
              format = SampleFormat.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            else -> reader.readUnknownField(tag)
          }
        }
        return AudioFormat(
          samplingRate = samplingRate,
          channels = channels,
          format = format,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: AudioFormat): AudioFormat = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  enum class SampleFormat(
    override val value: Int
  ) : WireEnum {
    /**
     * Unsigned 8 bit
     */
    AUD_FMT_U8(0),

    /**
     * Signed 16 bit (little endian)
     */
    AUD_FMT_S16(1);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<SampleFormat> = object : EnumAdapter<SampleFormat>(
        SampleFormat::class, 
        PROTO_3, 
        SampleFormat.AUD_FMT_U8
      ) {
        override fun fromValue(value: Int): SampleFormat? = SampleFormat.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): SampleFormat? = when (value) {
        0 -> AUD_FMT_U8
        1 -> AUD_FMT_S16
        else -> null
      }
    }
  }

  enum class Channels(
    override val value: Int
  ) : WireEnum {
    Mono(0),

    Stereo(1);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Channels> = object : EnumAdapter<Channels>(
        Channels::class, 
        PROTO_3, 
        Channels.Mono
      ) {
        override fun fromValue(value: Int): Channels? = Channels.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): Channels? = when (value) {
        0 -> Mono
        1 -> Stereo
        else -> null
      }
    }
  }
}
