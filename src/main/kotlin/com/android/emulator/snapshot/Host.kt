// Code generated by Wire protocol buffer compiler, do not edit.
// Source: emulator_snapshot.Host in snapshot.proto
package com.android.emulator.snapshot

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class Host(
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @JvmField
  val gpu_driver: String? = null,
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  @JvmField
  val hypervisor: Int? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<Host, Host.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.gpu_driver = gpu_driver
    builder.hypervisor = hypervisor
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Host) return false
    if (unknownFields != other.unknownFields) return false
    if (gpu_driver != other.gpu_driver) return false
    if (hypervisor != other.hypervisor) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + gpu_driver.hashCode()
      result = result * 37 + hypervisor.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (gpu_driver != null) result += """gpu_driver=${sanitize(gpu_driver)}"""
    if (hypervisor != null) result += """hypervisor=$hypervisor"""
    return result.joinToString(prefix = "Host{", separator = ", ", postfix = "}")
  }

  fun copy(
    gpu_driver: String? = this.gpu_driver,
    hypervisor: Int? = this.hypervisor,
    unknownFields: ByteString = this.unknownFields
  ): Host = Host(gpu_driver, hypervisor, unknownFields)

  class Builder : Message.Builder<Host, Builder>() {
    @JvmField
    var gpu_driver: String? = null

    @JvmField
    var hypervisor: Int? = null

    fun gpu_driver(gpu_driver: String?): Builder {
      this.gpu_driver = gpu_driver
      return this
    }

    fun hypervisor(hypervisor: Int?): Builder {
      this.hypervisor = hypervisor
      return this
    }

    override fun build(): Host = Host(
      gpu_driver = gpu_driver,
      hypervisor = hypervisor,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<Host> = object : ProtoAdapter<Host>(
      FieldEncoding.LENGTH_DELIMITED, 
      Host::class, 
      "type.googleapis.com/emulator_snapshot.Host", 
      PROTO_2, 
      null
    ) {
      override fun encodedSize(value: Host): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.STRING.encodedSizeWithTag(4, value.gpu_driver)
        size += ProtoAdapter.INT32.encodedSizeWithTag(5, value.hypervisor)
        return size
      }

      override fun encode(writer: ProtoWriter, value: Host) {
        ProtoAdapter.STRING.encodeWithTag(writer, 4, value.gpu_driver)
        ProtoAdapter.INT32.encodeWithTag(writer, 5, value.hypervisor)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): Host {
        var gpu_driver: String? = null
        var hypervisor: Int? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            4 -> gpu_driver = ProtoAdapter.STRING.decode(reader)
            5 -> hypervisor = ProtoAdapter.INT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Host(
          gpu_driver = gpu_driver,
          hypervisor = hypervisor,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: Host): Host = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
