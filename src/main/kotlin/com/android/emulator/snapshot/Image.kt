// Code generated by Wire protocol buffer compiler, do not edit.
// Source: emulator_snapshot.Image in snapshot.proto
package com.android.emulator.snapshot

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import okio.ByteString

class Image(
  @field:WireField(
    tag = 1,
    adapter = "com.android.emulator.snapshot.Image${'$'}Type#ADAPTER"
  )
  @JvmField
  val type: Type? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @JvmField
  val path: String? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  @JvmField
  val present: Boolean? = null,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  @JvmField
  val size: Long? = null,
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  @JvmField
  val modification_time: Long? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<Image, Image.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.type = type
    builder.path = path
    builder.present = present
    builder.size = size
    builder.modification_time = modification_time
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Image) return false
    if (unknownFields != other.unknownFields) return false
    if (type != other.type) return false
    if (path != other.path) return false
    if (present != other.present) return false
    if (size != other.size) return false
    if (modification_time != other.modification_time) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + type.hashCode()
      result = result * 37 + path.hashCode()
      result = result * 37 + present.hashCode()
      result = result * 37 + size.hashCode()
      result = result * 37 + modification_time.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (type != null) result += """type=$type"""
    if (path != null) result += """path=${sanitize(path)}"""
    if (present != null) result += """present=$present"""
    if (size != null) result += """size=$size"""
    if (modification_time != null) result += """modification_time=$modification_time"""
    return result.joinToString(prefix = "Image{", separator = ", ", postfix = "}")
  }

  fun copy(
    type: Type? = this.type,
    path: String? = this.path,
    present: Boolean? = this.present,
    size: Long? = this.size,
    modification_time: Long? = this.modification_time,
    unknownFields: ByteString = this.unknownFields
  ): Image = Image(type, path, present, size, modification_time, unknownFields)

  class Builder : Message.Builder<Image, Builder>() {
    @JvmField
    var type: Type? = null

    @JvmField
    var path: String? = null

    @JvmField
    var present: Boolean? = null

    @JvmField
    var size: Long? = null

    @JvmField
    var modification_time: Long? = null

    fun type(type: Type?): Builder {
      this.type = type
      return this
    }

    fun path(path: String?): Builder {
      this.path = path
      return this
    }

    fun present(present: Boolean?): Builder {
      this.present = present
      return this
    }

    fun size(size: Long?): Builder {
      this.size = size
      return this
    }

    fun modification_time(modification_time: Long?): Builder {
      this.modification_time = modification_time
      return this
    }

    override fun build(): Image = Image(
      type = type,
      path = path,
      present = present,
      size = size,
      modification_time = modification_time,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<Image> = object : ProtoAdapter<Image>(
      FieldEncoding.LENGTH_DELIMITED, 
      Image::class, 
      "type.googleapis.com/emulator_snapshot.Image", 
      PROTO_2, 
      null
    ) {
      override fun encodedSize(value: Image): Int {
        var size_ = value.unknownFields.size
        size_ += Type.ADAPTER.encodedSizeWithTag(1, value.type)
        size_ += ProtoAdapter.STRING.encodedSizeWithTag(2, value.path)
        size_ += ProtoAdapter.BOOL.encodedSizeWithTag(3, value.present)
        size_ += ProtoAdapter.INT64.encodedSizeWithTag(4, value.size)
        size_ += ProtoAdapter.INT64.encodedSizeWithTag(5, value.modification_time)
        return size_
      }

      override fun encode(writer: ProtoWriter, value: Image) {
        Type.ADAPTER.encodeWithTag(writer, 1, value.type)
        ProtoAdapter.STRING.encodeWithTag(writer, 2, value.path)
        ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.present)
        ProtoAdapter.INT64.encodeWithTag(writer, 4, value.size)
        ProtoAdapter.INT64.encodeWithTag(writer, 5, value.modification_time)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): Image {
        var type: Type? = null
        var path: String? = null
        var present: Boolean? = null
        var size: Long? = null
        var modification_time: Long? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> try {
              type = Type.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            2 -> path = ProtoAdapter.STRING.decode(reader)
            3 -> present = ProtoAdapter.BOOL.decode(reader)
            4 -> size = ProtoAdapter.INT64.decode(reader)
            5 -> modification_time = ProtoAdapter.INT64.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Image(
          type = type,
          path = path,
          present = present,
          size = size,
          modification_time = modification_time,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: Image): Image = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  enum class Type(
    override val value: Int
  ) : WireEnum {
    IMAGE_TYPE_UNKNOWN(0),

    IMAGE_TYPE_KERNEL(1),

    IMAGE_TYPE_KERNEL_RANCHU(2),

    IMAGE_TYPE_SYSTEM(3),

    IMAGE_TYPE_SYSTEM_COPY(4),

    IMAGE_TYPE_DATA(5),

    IMAGE_TYPE_DATA_COPY(6),

    IMAGE_TYPE_RAMDISK(7),

    IMAGE_TYPE_SDCARD(8),

    IMAGE_TYPE_CACHE(9),

    IMAGE_TYPE_VENDOR(10),

    IMAGE_TYPE_ENCRYPTION_KEY(11);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Type> = object : EnumAdapter<Type>(
        Type::class, 
        PROTO_2, 
        Type.IMAGE_TYPE_UNKNOWN
      ) {
        override fun fromValue(value: Int): Type? = Type.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): Type? = when (value) {
        0 -> IMAGE_TYPE_UNKNOWN
        1 -> IMAGE_TYPE_KERNEL
        2 -> IMAGE_TYPE_KERNEL_RANCHU
        3 -> IMAGE_TYPE_SYSTEM
        4 -> IMAGE_TYPE_SYSTEM_COPY
        5 -> IMAGE_TYPE_DATA
        6 -> IMAGE_TYPE_DATA_COPY
        7 -> IMAGE_TYPE_RAMDISK
        8 -> IMAGE_TYPE_SDCARD
        9 -> IMAGE_TYPE_CACHE
        10 -> IMAGE_TYPE_VENDOR
        11 -> IMAGE_TYPE_ENCRYPTION_KEY
        else -> null
      }
    }
  }
}
