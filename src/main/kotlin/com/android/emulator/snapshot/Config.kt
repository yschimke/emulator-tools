// Code generated by Wire protocol buffer compiler, do not edit.
// Source: emulator_snapshot.Config in snapshot.proto
package com.android.emulator.snapshot

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.internal.checkElementsNotNull
import com.squareup.wire.internal.immutableCopyOf
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.collections.List
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class Config(
  enabled_features: List<Int> = emptyList(),
  /**
   * This holds the renderer; int32 for the same reason as |enabled_features|.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  @JvmField
  val selected_renderer: Int? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  @JvmField
  val cpu_core_count: Int? = null,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  @JvmField
  val ram_size_bytes: Long? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<Config, Config.Builder>(ADAPTER, unknownFields) {
  /**
   * Features are int32, not enums here to make sure we don't have to update
   * one more protobuf definition with every single new feature flag, even
   * when the code doesn't really care about the actual meaning for them,
   * only for the values.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val enabled_features: List<Int> = immutableCopyOf("enabled_features", enabled_features)

  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.enabled_features = enabled_features
    builder.selected_renderer = selected_renderer
    builder.cpu_core_count = cpu_core_count
    builder.ram_size_bytes = ram_size_bytes
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Config) return false
    if (unknownFields != other.unknownFields) return false
    if (enabled_features != other.enabled_features) return false
    if (selected_renderer != other.selected_renderer) return false
    if (cpu_core_count != other.cpu_core_count) return false
    if (ram_size_bytes != other.ram_size_bytes) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + enabled_features.hashCode()
      result = result * 37 + selected_renderer.hashCode()
      result = result * 37 + cpu_core_count.hashCode()
      result = result * 37 + ram_size_bytes.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (enabled_features.isNotEmpty()) result += """enabled_features=$enabled_features"""
    if (selected_renderer != null) result += """selected_renderer=$selected_renderer"""
    if (cpu_core_count != null) result += """cpu_core_count=$cpu_core_count"""
    if (ram_size_bytes != null) result += """ram_size_bytes=$ram_size_bytes"""
    return result.joinToString(prefix = "Config{", separator = ", ", postfix = "}")
  }

  fun copy(
    enabled_features: List<Int> = this.enabled_features,
    selected_renderer: Int? = this.selected_renderer,
    cpu_core_count: Int? = this.cpu_core_count,
    ram_size_bytes: Long? = this.ram_size_bytes,
    unknownFields: ByteString = this.unknownFields
  ): Config = Config(enabled_features, selected_renderer, cpu_core_count, ram_size_bytes,
      unknownFields)

  class Builder : Message.Builder<Config, Builder>() {
    @JvmField
    var enabled_features: List<Int> = emptyList()

    @JvmField
    var selected_renderer: Int? = null

    @JvmField
    var cpu_core_count: Int? = null

    @JvmField
    var ram_size_bytes: Long? = null

    /**
     * Features are int32, not enums here to make sure we don't have to update
     * one more protobuf definition with every single new feature flag, even
     * when the code doesn't really care about the actual meaning for them,
     * only for the values.
     */
    fun enabled_features(enabled_features: List<Int>): Builder {
      checkElementsNotNull(enabled_features)
      this.enabled_features = enabled_features
      return this
    }

    /**
     * This holds the renderer; int32 for the same reason as |enabled_features|.
     */
    fun selected_renderer(selected_renderer: Int?): Builder {
      this.selected_renderer = selected_renderer
      return this
    }

    fun cpu_core_count(cpu_core_count: Int?): Builder {
      this.cpu_core_count = cpu_core_count
      return this
    }

    fun ram_size_bytes(ram_size_bytes: Long?): Builder {
      this.ram_size_bytes = ram_size_bytes
      return this
    }

    override fun build(): Config = Config(
      enabled_features = enabled_features,
      selected_renderer = selected_renderer,
      cpu_core_count = cpu_core_count,
      ram_size_bytes = ram_size_bytes,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<Config> = object : ProtoAdapter<Config>(
      FieldEncoding.LENGTH_DELIMITED, 
      Config::class, 
      "type.googleapis.com/emulator_snapshot.Config", 
      PROTO_2, 
      null
    ) {
      override fun encodedSize(value: Config): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.INT32.asRepeated().encodedSizeWithTag(1, value.enabled_features)
        size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.selected_renderer)
        size += ProtoAdapter.INT32.encodedSizeWithTag(3, value.cpu_core_count)
        size += ProtoAdapter.INT64.encodedSizeWithTag(4, value.ram_size_bytes)
        return size
      }

      override fun encode(writer: ProtoWriter, value: Config) {
        ProtoAdapter.INT32.asRepeated().encodeWithTag(writer, 1, value.enabled_features)
        ProtoAdapter.INT32.encodeWithTag(writer, 2, value.selected_renderer)
        ProtoAdapter.INT32.encodeWithTag(writer, 3, value.cpu_core_count)
        ProtoAdapter.INT64.encodeWithTag(writer, 4, value.ram_size_bytes)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): Config {
        val enabled_features = mutableListOf<Int>()
        var selected_renderer: Int? = null
        var cpu_core_count: Int? = null
        var ram_size_bytes: Long? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> enabled_features.add(ProtoAdapter.INT32.decode(reader))
            2 -> selected_renderer = ProtoAdapter.INT32.decode(reader)
            3 -> cpu_core_count = ProtoAdapter.INT32.decode(reader)
            4 -> ram_size_bytes = ProtoAdapter.INT64.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Config(
          enabled_features = enabled_features,
          selected_renderer = selected_renderer,
          cpu_core_count = cpu_core_count,
          ram_size_bytes = ram_size_bytes,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: Config): Config = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
