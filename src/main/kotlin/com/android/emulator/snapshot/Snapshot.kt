// Code generated by Wire protocol buffer compiler, do not edit.
// Source: emulator_snapshot.Snapshot in snapshot.proto
package com.android.emulator.snapshot

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.internal.checkElementsNotNull
import com.squareup.wire.internal.immutableCopyOf
import com.squareup.wire.internal.redactElements
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.collections.List
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class Snapshot(
  /**
   * Update every time when introducing some breaking changes that make the
   * previous loading code break when trying to load the new snapshot.
   * NOTE: if the old code is fine with just skipping the new fields or not
   *       getting the meaning of new values, |version| should remain
   *       unchanged.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  @JvmField
  val version: Int? = null,
  /**
   * Purely informative: when this snapshot was created, Unix timestamp.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  @JvmField
  val creation_time: Long? = null,
  images: List<Image> = emptyList(),
  /**
   * Description of the host machine properties needed to load this snapshot.
   */
  @field:WireField(
    tag = 4,
    adapter = "com.android.emulator.snapshot.Host#ADAPTER"
  )
  @JvmField
  val host: Host? = null,
  /**
   * Description of the emulator configuration needed for this snapshot.
   * NOTE: try not to duplicate the configuration that's already in
   *       hardware-qemu.ini; only add what's either not there or what
   *       could've been overridden during process initialization.
   */
  @field:WireField(
    tag = 5,
    adapter = "com.android.emulator.snapshot.Config#ADAPTER"
  )
  @JvmField
  val config: Config? = null,
  /**
   * Set if the snapshot failed to load during the last attempt.
   * Code is up to the application to define, with 0 meaning 'not failed' just
   * in case.
   */
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  @JvmField
  val failed_to_load_reason_code: Long? = null,
  /**
   * Set if data image is mounted.
   * User build and userdebug build mount data partition at different time.
   * But it should be done before boot finished, so this field is very likely
   * to be true.
   * We snapshot it here just in case someday we support snapshot during
   * booting.
   */
  @field:WireField(
    tag = 8,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  @JvmField
  val guest_data_partition_mounted: Boolean? = null,
  /**
   * Emulator rotation angle, in right angles (e.g. 1 is 90 degrees, 2 is 180
   * etc).
   */
  @field:WireField(
    tag = 9,
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  @JvmField
  val rotation: Int? = null,
  /**
   * Number of invalid loads / crashes that happened under this snapshot.
   */
  @field:WireField(
    tag = 10,
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  @JvmField
  val invalid_loads: Int? = null,
  /**
   * Number of successful loads.
   */
  @field:WireField(
    tag = 11,
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  @JvmField
  val successful_loads: Int? = null,
  /**
   * The name given to the snapshot by the user. Independent of the
   * file name.
   */
  @field:WireField(
    tag = 12,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @JvmField
  val logical_name: String? = null,
  /**
   * The file name of this snapshot's parent. The parent is the
   * snapshot that was loaded into the AVD prior to this snapshot
   * being taken
   */
  @field:WireField(
    tag = 13,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @JvmField
  val parent: String? = null,
  /**
   * Arbitrary description added by the user
   */
  @field:WireField(
    tag = 14,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @JvmField
  val description: String? = null,
  save_stats: List<SaveStats> = emptyList(),
  /**
   * Folded state.
   */
  @field:WireField(
    tag = 16,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  @JvmField
  val folded: Boolean? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<Snapshot, Snapshot.Builder>(ADAPTER, unknownFields) {
  /**
   * List of mounted disk images used during the snapshot creation.
   */
  @field:WireField(
    tag = 3,
    adapter = "com.android.emulator.snapshot.Image#ADAPTER",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val images: List<Image> = immutableCopyOf("images", images)

  /**
   * Record of save stats.
   */
  @field:WireField(
    tag = 15,
    adapter = "com.android.emulator.snapshot.SaveStats#ADAPTER",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val save_stats: List<SaveStats> = immutableCopyOf("save_stats", save_stats)

  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.version = version
    builder.creation_time = creation_time
    builder.images = images
    builder.host = host
    builder.config = config
    builder.failed_to_load_reason_code = failed_to_load_reason_code
    builder.guest_data_partition_mounted = guest_data_partition_mounted
    builder.rotation = rotation
    builder.invalid_loads = invalid_loads
    builder.successful_loads = successful_loads
    builder.logical_name = logical_name
    builder.parent = parent
    builder.description = description
    builder.save_stats = save_stats
    builder.folded = folded
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Snapshot) return false
    if (unknownFields != other.unknownFields) return false
    if (version != other.version) return false
    if (creation_time != other.creation_time) return false
    if (images != other.images) return false
    if (host != other.host) return false
    if (config != other.config) return false
    if (failed_to_load_reason_code != other.failed_to_load_reason_code) return false
    if (guest_data_partition_mounted != other.guest_data_partition_mounted) return false
    if (rotation != other.rotation) return false
    if (invalid_loads != other.invalid_loads) return false
    if (successful_loads != other.successful_loads) return false
    if (logical_name != other.logical_name) return false
    if (parent != other.parent) return false
    if (description != other.description) return false
    if (save_stats != other.save_stats) return false
    if (folded != other.folded) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + version.hashCode()
      result = result * 37 + creation_time.hashCode()
      result = result * 37 + images.hashCode()
      result = result * 37 + host.hashCode()
      result = result * 37 + config.hashCode()
      result = result * 37 + failed_to_load_reason_code.hashCode()
      result = result * 37 + guest_data_partition_mounted.hashCode()
      result = result * 37 + rotation.hashCode()
      result = result * 37 + invalid_loads.hashCode()
      result = result * 37 + successful_loads.hashCode()
      result = result * 37 + logical_name.hashCode()
      result = result * 37 + parent.hashCode()
      result = result * 37 + description.hashCode()
      result = result * 37 + save_stats.hashCode()
      result = result * 37 + folded.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (version != null) result += """version=$version"""
    if (creation_time != null) result += """creation_time=$creation_time"""
    if (images.isNotEmpty()) result += """images=$images"""
    if (host != null) result += """host=$host"""
    if (config != null) result += """config=$config"""
    if (failed_to_load_reason_code != null) result +=
        """failed_to_load_reason_code=$failed_to_load_reason_code"""
    if (guest_data_partition_mounted != null) result +=
        """guest_data_partition_mounted=$guest_data_partition_mounted"""
    if (rotation != null) result += """rotation=$rotation"""
    if (invalid_loads != null) result += """invalid_loads=$invalid_loads"""
    if (successful_loads != null) result += """successful_loads=$successful_loads"""
    if (logical_name != null) result += """logical_name=${sanitize(logical_name)}"""
    if (parent != null) result += """parent=${sanitize(parent)}"""
    if (description != null) result += """description=${sanitize(description)}"""
    if (save_stats.isNotEmpty()) result += """save_stats=$save_stats"""
    if (folded != null) result += """folded=$folded"""
    return result.joinToString(prefix = "Snapshot{", separator = ", ", postfix = "}")
  }

  fun copy(
    version: Int? = this.version,
    creation_time: Long? = this.creation_time,
    images: List<Image> = this.images,
    host: Host? = this.host,
    config: Config? = this.config,
    failed_to_load_reason_code: Long? = this.failed_to_load_reason_code,
    guest_data_partition_mounted: Boolean? = this.guest_data_partition_mounted,
    rotation: Int? = this.rotation,
    invalid_loads: Int? = this.invalid_loads,
    successful_loads: Int? = this.successful_loads,
    logical_name: String? = this.logical_name,
    parent: String? = this.parent,
    description: String? = this.description,
    save_stats: List<SaveStats> = this.save_stats,
    folded: Boolean? = this.folded,
    unknownFields: ByteString = this.unknownFields
  ): Snapshot = Snapshot(version, creation_time, images, host, config, failed_to_load_reason_code,
      guest_data_partition_mounted, rotation, invalid_loads, successful_loads, logical_name, parent,
      description, save_stats, folded, unknownFields)

  class Builder : Message.Builder<Snapshot, Builder>() {
    @JvmField
    var version: Int? = null

    @JvmField
    var creation_time: Long? = null

    @JvmField
    var images: List<Image> = emptyList()

    @JvmField
    var host: Host? = null

    @JvmField
    var config: Config? = null

    @JvmField
    var failed_to_load_reason_code: Long? = null

    @JvmField
    var guest_data_partition_mounted: Boolean? = null

    @JvmField
    var rotation: Int? = null

    @JvmField
    var invalid_loads: Int? = null

    @JvmField
    var successful_loads: Int? = null

    @JvmField
    var logical_name: String? = null

    @JvmField
    var parent: String? = null

    @JvmField
    var description: String? = null

    @JvmField
    var save_stats: List<SaveStats> = emptyList()

    @JvmField
    var folded: Boolean? = null

    /**
     * Update every time when introducing some breaking changes that make the
     * previous loading code break when trying to load the new snapshot.
     * NOTE: if the old code is fine with just skipping the new fields or not
     *       getting the meaning of new values, |version| should remain
     *       unchanged.
     */
    fun version(version: Int?): Builder {
      this.version = version
      return this
    }

    /**
     * Purely informative: when this snapshot was created, Unix timestamp.
     */
    fun creation_time(creation_time: Long?): Builder {
      this.creation_time = creation_time
      return this
    }

    /**
     * List of mounted disk images used during the snapshot creation.
     */
    fun images(images: List<Image>): Builder {
      checkElementsNotNull(images)
      this.images = images
      return this
    }

    /**
     * Description of the host machine properties needed to load this snapshot.
     */
    fun host(host: Host?): Builder {
      this.host = host
      return this
    }

    /**
     * Description of the emulator configuration needed for this snapshot.
     * NOTE: try not to duplicate the configuration that's already in
     *       hardware-qemu.ini; only add what's either not there or what
     *       could've been overridden during process initialization.
     */
    fun config(config: Config?): Builder {
      this.config = config
      return this
    }

    /**
     * Set if the snapshot failed to load during the last attempt.
     * Code is up to the application to define, with 0 meaning 'not failed' just
     * in case.
     */
    fun failed_to_load_reason_code(failed_to_load_reason_code: Long?): Builder {
      this.failed_to_load_reason_code = failed_to_load_reason_code
      return this
    }

    /**
     * Set if data image is mounted.
     * User build and userdebug build mount data partition at different time.
     * But it should be done before boot finished, so this field is very likely
     * to be true.
     * We snapshot it here just in case someday we support snapshot during
     * booting.
     */
    fun guest_data_partition_mounted(guest_data_partition_mounted: Boolean?): Builder {
      this.guest_data_partition_mounted = guest_data_partition_mounted
      return this
    }

    /**
     * Emulator rotation angle, in right angles (e.g. 1 is 90 degrees, 2 is 180
     * etc).
     */
    fun rotation(rotation: Int?): Builder {
      this.rotation = rotation
      return this
    }

    /**
     * Number of invalid loads / crashes that happened under this snapshot.
     */
    fun invalid_loads(invalid_loads: Int?): Builder {
      this.invalid_loads = invalid_loads
      return this
    }

    /**
     * Number of successful loads.
     */
    fun successful_loads(successful_loads: Int?): Builder {
      this.successful_loads = successful_loads
      return this
    }

    /**
     * The name given to the snapshot by the user. Independent of the
     * file name.
     */
    fun logical_name(logical_name: String?): Builder {
      this.logical_name = logical_name
      return this
    }

    /**
     * The file name of this snapshot's parent. The parent is the
     * snapshot that was loaded into the AVD prior to this snapshot
     * being taken
     */
    fun parent(parent: String?): Builder {
      this.parent = parent
      return this
    }

    /**
     * Arbitrary description added by the user
     */
    fun description(description: String?): Builder {
      this.description = description
      return this
    }

    /**
     * Record of save stats.
     */
    fun save_stats(save_stats: List<SaveStats>): Builder {
      checkElementsNotNull(save_stats)
      this.save_stats = save_stats
      return this
    }

    /**
     * Folded state.
     */
    fun folded(folded: Boolean?): Builder {
      this.folded = folded
      return this
    }

    override fun build(): Snapshot = Snapshot(
      version = version,
      creation_time = creation_time,
      images = images,
      host = host,
      config = config,
      failed_to_load_reason_code = failed_to_load_reason_code,
      guest_data_partition_mounted = guest_data_partition_mounted,
      rotation = rotation,
      invalid_loads = invalid_loads,
      successful_loads = successful_loads,
      logical_name = logical_name,
      parent = parent,
      description = description,
      save_stats = save_stats,
      folded = folded,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<Snapshot> = object : ProtoAdapter<Snapshot>(
      FieldEncoding.LENGTH_DELIMITED, 
      Snapshot::class, 
      "type.googleapis.com/emulator_snapshot.Snapshot", 
      PROTO_2, 
      null
    ) {
      override fun encodedSize(value: Snapshot): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.INT32.encodedSizeWithTag(1, value.version)
        size += ProtoAdapter.INT64.encodedSizeWithTag(2, value.creation_time)
        size += Image.ADAPTER.asRepeated().encodedSizeWithTag(3, value.images)
        size += Host.ADAPTER.encodedSizeWithTag(4, value.host)
        size += Config.ADAPTER.encodedSizeWithTag(5, value.config)
        size += ProtoAdapter.INT64.encodedSizeWithTag(7, value.failed_to_load_reason_code)
        size += ProtoAdapter.BOOL.encodedSizeWithTag(8, value.guest_data_partition_mounted)
        size += ProtoAdapter.INT32.encodedSizeWithTag(9, value.rotation)
        size += ProtoAdapter.INT32.encodedSizeWithTag(10, value.invalid_loads)
        size += ProtoAdapter.INT32.encodedSizeWithTag(11, value.successful_loads)
        size += ProtoAdapter.STRING.encodedSizeWithTag(12, value.logical_name)
        size += ProtoAdapter.STRING.encodedSizeWithTag(13, value.parent)
        size += ProtoAdapter.STRING.encodedSizeWithTag(14, value.description)
        size += SaveStats.ADAPTER.asRepeated().encodedSizeWithTag(15, value.save_stats)
        size += ProtoAdapter.BOOL.encodedSizeWithTag(16, value.folded)
        return size
      }

      override fun encode(writer: ProtoWriter, value: Snapshot) {
        ProtoAdapter.INT32.encodeWithTag(writer, 1, value.version)
        ProtoAdapter.INT64.encodeWithTag(writer, 2, value.creation_time)
        Image.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.images)
        Host.ADAPTER.encodeWithTag(writer, 4, value.host)
        Config.ADAPTER.encodeWithTag(writer, 5, value.config)
        ProtoAdapter.INT64.encodeWithTag(writer, 7, value.failed_to_load_reason_code)
        ProtoAdapter.BOOL.encodeWithTag(writer, 8, value.guest_data_partition_mounted)
        ProtoAdapter.INT32.encodeWithTag(writer, 9, value.rotation)
        ProtoAdapter.INT32.encodeWithTag(writer, 10, value.invalid_loads)
        ProtoAdapter.INT32.encodeWithTag(writer, 11, value.successful_loads)
        ProtoAdapter.STRING.encodeWithTag(writer, 12, value.logical_name)
        ProtoAdapter.STRING.encodeWithTag(writer, 13, value.parent)
        ProtoAdapter.STRING.encodeWithTag(writer, 14, value.description)
        SaveStats.ADAPTER.asRepeated().encodeWithTag(writer, 15, value.save_stats)
        ProtoAdapter.BOOL.encodeWithTag(writer, 16, value.folded)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): Snapshot {
        var version: Int? = null
        var creation_time: Long? = null
        val images = mutableListOf<Image>()
        var host: Host? = null
        var config: Config? = null
        var failed_to_load_reason_code: Long? = null
        var guest_data_partition_mounted: Boolean? = null
        var rotation: Int? = null
        var invalid_loads: Int? = null
        var successful_loads: Int? = null
        var logical_name: String? = null
        var parent: String? = null
        var description: String? = null
        val save_stats = mutableListOf<SaveStats>()
        var folded: Boolean? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> version = ProtoAdapter.INT32.decode(reader)
            2 -> creation_time = ProtoAdapter.INT64.decode(reader)
            3 -> images.add(Image.ADAPTER.decode(reader))
            4 -> host = Host.ADAPTER.decode(reader)
            5 -> config = Config.ADAPTER.decode(reader)
            7 -> failed_to_load_reason_code = ProtoAdapter.INT64.decode(reader)
            8 -> guest_data_partition_mounted = ProtoAdapter.BOOL.decode(reader)
            9 -> rotation = ProtoAdapter.INT32.decode(reader)
            10 -> invalid_loads = ProtoAdapter.INT32.decode(reader)
            11 -> successful_loads = ProtoAdapter.INT32.decode(reader)
            12 -> logical_name = ProtoAdapter.STRING.decode(reader)
            13 -> parent = ProtoAdapter.STRING.decode(reader)
            14 -> description = ProtoAdapter.STRING.decode(reader)
            15 -> save_stats.add(SaveStats.ADAPTER.decode(reader))
            16 -> folded = ProtoAdapter.BOOL.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Snapshot(
          version = version,
          creation_time = creation_time,
          images = images,
          host = host,
          config = config,
          failed_to_load_reason_code = failed_to_load_reason_code,
          guest_data_partition_mounted = guest_data_partition_mounted,
          rotation = rotation,
          invalid_loads = invalid_loads,
          successful_loads = successful_loads,
          logical_name = logical_name,
          parent = parent,
          description = description,
          save_stats = save_stats,
          folded = folded,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: Snapshot): Snapshot = value.copy(
        images = value.images.redactElements(Image.ADAPTER),
        host = value.host?.let(Host.ADAPTER::redact),
        config = value.config?.let(Config.ADAPTER::redact),
        save_stats = value.save_stats.redactElements(SaveStats.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
