// Code generated by Wire protocol buffer compiler, do not edit.
// Source: google.protobuf.Empty in google\protobuf\empty.proto
package kotlin

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * A generic empty message that you can re-use to avoid defining duplicated
 * empty messages in your APIs. A typical example is to use it as the request
 * or the response type of an API method. For instance:
 *
 *     service Foo {
 *       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *     }
 *
 * The JSON representation for `Empty` is empty JSON object `{}`.
 */
class Unit(
  unknownFields: ByteString = ByteString.EMPTY
) : Message<Unit, Unit.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Unit) return false
    if (unknownFields != other.unknownFields) return false
    return true
  }

  override fun hashCode(): Int = unknownFields.hashCode()

  override fun toString(): String = "Unit{}"

  fun copy(unknownFields: ByteString = this.unknownFields): Unit = Unit(unknownFields)

  class Builder : Message.Builder<Unit, Builder>() {
    override fun build(): Unit = Unit(
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<Unit> = object : ProtoAdapter<Unit>(
      FieldEncoding.LENGTH_DELIMITED, 
      Unit::class, 
      "type.googleapis.com/google.protobuf.Empty", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: Unit): Int {
        var size = value.unknownFields.size
        return size
      }

      override fun encode(writer: ProtoWriter, value: Unit) {
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader) {
        val unknownFields = reader.forEachTag(reader::readUnknownField)
        return Unit(
          unknownFields = unknownFields
        )
      }

      override fun redact(value: Unit): Unit = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
